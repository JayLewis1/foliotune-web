[{"/Users/jay/Desktop/Current Projects/Foliotune/web/src/accessToken.ts":"1","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/login-register/Register.tsx":"2","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/projects/Projects.tsx":"3","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/landing/Landing.tsx":"4","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/discover/Discover.tsx":"5","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/request/RequestResult.tsx":"6","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/header/Header.tsx":"7","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/application/reducers.ts":"8","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/profile/reducers.ts":"9","/Users/jay/Desktop/Current Projects/Foliotune/web/src/graphql/mutations.ts":"10","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/searchResult/lists/Projects.tsx":"11","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/header/Search.tsx":"12","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/posts/Posts.tsx":"13","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/navigation/DropDown.tsx":"14","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/posts/UsersPost.tsx":"15","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/me/Posts.tsx":"16","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/edit/Bio.tsx":"17","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tracks/Recording.tsx":"18","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/components/ProjectsHeader.tsx":"19","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tabs/Tabs.tsx":"20","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/profile/types.ts":"21","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/project/UsersProject.tsx":"22","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/formatTime/FormatTimestamp.tsx":"23","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/components/EmptyState.tsx":"24","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/DeleteWSItem.tsx":"25","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tabs/CreateTabs.tsx":"26","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/contributors/ContributorPanel.tsx":"27","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/functions/Share.tsx":"28","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/contributors/RemoveContributor.tsx":"29","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/Workspace.tsx":"30","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/playbar/Playbar.tsx":"31","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/functions/CreatePost.tsx":"32","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/playbar/reducers.ts":"33","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/header/AccountOptions.tsx":"34","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/sharedProject/UserSharedProject.tsx":"35","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/create/CreateComponent.tsx":"36","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/mates/types.ts":"37","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/application/types.ts":"38","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tracks/TracksViewOnly.tsx":"39","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tabs/TabsViewOnly.tsx":"40","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/lyrics/Lyrics.tsx":"41","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/functions/DeletePost.tsx":"42","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/contributors/ContributorAvatar.tsx":"43","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/lyrics/CreatLyrics.tsx":"44","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/options/Options.tsx":"45","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/functions/DeleteComment.tsx":"46","/Users/jay/Desktop/Current Projects/Foliotune/web/src/App.tsx":"47","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/index.ts":"48","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/searchResult/SearchResult.tsx":"49","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/myMates/MyMates.tsx":"50","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/scrollToTop/ScrollToTop.tsx":"51","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/workspace/reducers.ts":"52","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/project/reducers.ts":"53","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/projects/Projects.tsx":"54","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/lyrics/LyricsViewOnly.tsx":"55","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/lists/Mates.tsx":"56","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/components/Information.tsx":"57","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/searchResult/lists/Users.tsx":"58","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/lists/MyProjects.tsx":"59","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/edit/NameDob.tsx":"60","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/workspace/types.ts":"61","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/comments/Comment.tsx":"62","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/functions/Validation.tsx":"63","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/feed/Feed.tsx":"64","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/Profile.tsx":"65","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/functions/CreateProject.tsx":"66","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/lists/SearchMates.tsx":"67","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/sharedProject/MySharedProject.tsx":"68","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/posts/MyPost.tsx":"69","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/edit/Instruments.tsx":"70","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/playbar/types.ts":"71","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/project/types.ts":"72","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/components/SearchProjects.tsx":"73","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/options/Options.tsx":"74","/Users/jay/Desktop/Current Projects/Foliotune/web/src/index.tsx":"75","/Users/jay/Desktop/Current Projects/Foliotune/web/src/Routes.tsx":"76","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/user/reducers.ts":"77","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/user/types.ts":"78","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/UserProfile.tsx":"79","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/project/MyProject.tsx":"80","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/store.ts":"81","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/header/CreateOptions.tsx":"82","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tracks/Tracks.tsx":"83","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/like/LikePost.tsx":"84","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/options/Options.tsx":"85","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/login-register/Login.tsx":"86","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/posts/reducers.ts":"87","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/posts/types.ts":"88","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/mate/Mate.tsx":"89","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/notifications/Notifications.tsx":"90","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/components/ResultComponent.tsx":"91","/Users/jay/Desktop/Current Projects/Foliotune/web/src/graphql/queries.ts":"92","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/notFound/NotFound.tsx":"93","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/navigation/Navigation.tsx":"94"},{"size":220,"mtime":1616003329284,"results":"95","hashOfConfig":"96"},{"size":16671,"mtime":1615808888811,"results":"97","hashOfConfig":"96"},{"size":439,"mtime":1615475187120,"results":"98","hashOfConfig":"96"},{"size":4815,"mtime":1613041829919,"results":"99","hashOfConfig":"96"},{"size":2047,"mtime":1615287222472,"results":"100","hashOfConfig":"96"},{"size":920,"mtime":1615496879003,"results":"101","hashOfConfig":"96"},{"size":10586,"mtime":1615809196543,"results":"102","hashOfConfig":"96"},{"size":3407,"mtime":1615550526228,"results":"103","hashOfConfig":"96"},{"size":1157,"mtime":1610971675612,"results":"104","hashOfConfig":"96"},{"size":6293,"mtime":1615380144722,"results":"105","hashOfConfig":"96"},{"size":1835,"mtime":1615474296850,"results":"106","hashOfConfig":"96"},{"size":4395,"mtime":1615488235355,"results":"107","hashOfConfig":"96"},{"size":1358,"mtime":1615391981804,"results":"108","hashOfConfig":"96"},{"size":4481,"mtime":1615560701269,"results":"109","hashOfConfig":"96"},{"size":2744,"mtime":1615372985227,"results":"110","hashOfConfig":"96"},{"size":1385,"mtime":1615294259590,"results":"111","hashOfConfig":"96"},{"size":1999,"mtime":1611419923305,"results":"112","hashOfConfig":"96"},{"size":5475,"mtime":1614711671090,"results":"113","hashOfConfig":"96"},{"size":2641,"mtime":1615466176452,"results":"114","hashOfConfig":"96"},{"size":3409,"mtime":1614711923228,"results":"115","hashOfConfig":"96"},{"size":691,"mtime":1610971652091,"results":"116","hashOfConfig":"96"},{"size":2660,"mtime":1615391350040,"results":"117","hashOfConfig":"96"},{"size":1474,"mtime":1612818521028,"results":"118","hashOfConfig":"96"},{"size":1066,"mtime":1615391954421,"results":"119","hashOfConfig":"96"},{"size":4395,"mtime":1614774164287,"results":"120","hashOfConfig":"96"},{"size":5949,"mtime":1612953201368,"results":"121","hashOfConfig":"96"},{"size":7891,"mtime":1614949882503,"results":"122","hashOfConfig":"96"},{"size":4065,"mtime":1615386695469,"results":"123","hashOfConfig":"96"},{"size":3725,"mtime":1614947806717,"results":"124","hashOfConfig":"96"},{"size":6176,"mtime":1615628740062,"results":"125","hashOfConfig":"96"},{"size":3691,"mtime":1615552693876,"results":"126","hashOfConfig":"96"},{"size":4407,"mtime":1615460055346,"results":"127","hashOfConfig":"96"},{"size":641,"mtime":1614861411752,"results":"128","hashOfConfig":"96"},{"size":2562,"mtime":1614962752046,"results":"129","hashOfConfig":"96"},{"size":3968,"mtime":1615374719538,"results":"130","hashOfConfig":"96"},{"size":1750,"mtime":1614959184140,"results":"131","hashOfConfig":"96"},{"size":687,"mtime":1615802807195,"results":"132","hashOfConfig":"96"},{"size":1930,"mtime":1615550154503,"results":"133","hashOfConfig":"96"},{"size":2786,"mtime":1612954874535,"results":"134","hashOfConfig":"96"},{"size":1948,"mtime":1612954665060,"results":"135","hashOfConfig":"96"},{"size":2946,"mtime":1614711953142,"results":"136","hashOfConfig":"96"},{"size":4324,"mtime":1615373898785,"results":"137","hashOfConfig":"96"},{"size":1009,"mtime":1614937151486,"results":"138","hashOfConfig":"96"},{"size":4709,"mtime":1612455319856,"results":"139","hashOfConfig":"96"},{"size":2819,"mtime":1615803605447,"results":"140","hashOfConfig":"96"},{"size":1970,"mtime":1615378781417,"results":"141","hashOfConfig":"96"},{"size":730,"mtime":1615993645459,"results":"142","hashOfConfig":"96"},{"size":705,"mtime":1615377005046,"results":"143","hashOfConfig":"96"},{"size":2616,"mtime":1615488433914,"results":"144","hashOfConfig":"96"},{"size":698,"mtime":1615458628469,"results":"145","hashOfConfig":"96"},{"size":401,"mtime":1611876826825,"results":"146","hashOfConfig":"96"},{"size":1821,"mtime":1614712184030,"results":"147","hashOfConfig":"96"},{"size":1323,"mtime":1614941187124,"results":"148","hashOfConfig":"96"},{"size":944,"mtime":1615465191846,"results":"149","hashOfConfig":"96"},{"size":1389,"mtime":1612955003163,"results":"150","hashOfConfig":"96"},{"size":845,"mtime":1615458775310,"results":"151","hashOfConfig":"96"},{"size":3613,"mtime":1615548204262,"results":"152","hashOfConfig":"96"},{"size":1709,"mtime":1615474079703,"results":"153","hashOfConfig":"96"},{"size":669,"mtime":1615475253603,"results":"154","hashOfConfig":"96"},{"size":7044,"mtime":1611421775916,"results":"155","hashOfConfig":"96"},{"size":1453,"mtime":1614683035304,"results":"156","hashOfConfig":"96"},{"size":7378,"mtime":1615374534698,"results":"157","hashOfConfig":"96"},{"size":4492,"mtime":1615803575820,"results":"158","hashOfConfig":"96"},{"size":1930,"mtime":1615294367121,"results":"159","hashOfConfig":"96"},{"size":6733,"mtime":1615391386062,"results":"160","hashOfConfig":"96"},{"size":5838,"mtime":1615460088978,"results":"161","hashOfConfig":"96"},{"size":1933,"mtime":1615385374101,"results":"162","hashOfConfig":"96"},{"size":4858,"mtime":1615373798576,"results":"163","hashOfConfig":"96"},{"size":3243,"mtime":1615373801343,"results":"164","hashOfConfig":"96"},{"size":2164,"mtime":1611420561537,"results":"165","hashOfConfig":"96"},{"size":509,"mtime":1614861408135,"results":"166","hashOfConfig":"96"},{"size":1256,"mtime":1614941156632,"results":"167","hashOfConfig":"96"},{"size":6864,"mtime":1614954999458,"results":"168","hashOfConfig":"96"},{"size":1121,"mtime":1615374372803,"results":"169","hashOfConfig":"96"},{"size":2978,"mtime":1616006248335,"results":"170","hashOfConfig":"96"},{"size":5556,"mtime":1615496422290,"results":"171","hashOfConfig":"96"},{"size":562,"mtime":1610020920473,"results":"172","hashOfConfig":"96"},{"size":364,"mtime":1610020809656,"results":"173","hashOfConfig":"96"},{"size":4722,"mtime":1615803404950,"results":"174","hashOfConfig":"96"},{"size":4029,"mtime":1615391363354,"results":"175","hashOfConfig":"96"},{"size":572,"mtime":1610533963335,"results":"176","hashOfConfig":"96"},{"size":1481,"mtime":1615281654874,"results":"177","hashOfConfig":"96"},{"size":3794,"mtime":1614693988927,"results":"178","hashOfConfig":"96"},{"size":1727,"mtime":1615387457119,"results":"179","hashOfConfig":"96"},{"size":3186,"mtime":1615293021261,"results":"180","hashOfConfig":"96"},{"size":6966,"mtime":1614762716634,"results":"181","hashOfConfig":"96"},{"size":851,"mtime":1615374221425,"results":"182","hashOfConfig":"96"},{"size":769,"mtime":1615374317349,"results":"183","hashOfConfig":"96"},{"size":2279,"mtime":1615803512501,"results":"184","hashOfConfig":"96"},{"size":5249,"mtime":1612610811052,"results":"185","hashOfConfig":"96"},{"size":7494,"mtime":1615293025812,"results":"186","hashOfConfig":"96"},{"size":5689,"mtime":1615494039983,"results":"187","hashOfConfig":"96"},{"size":208,"mtime":1610382551121,"results":"188","hashOfConfig":"96"},{"size":3842,"mtime":1613210707857,"results":"189","hashOfConfig":"96"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},"epx82i",{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"192"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"192"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"192"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"206"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"200"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"217"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"192"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"192"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"200"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"255"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"255"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"192"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"192"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"212"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"217"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"192"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"192"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"200"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"234"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"217"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"192"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"321"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"206"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"192"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"212"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"234"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"397","messages":"398","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399","usedDeprecatedRules":"217"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"206"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"217"},"/Users/jay/Desktop/Current Projects/Foliotune/web/src/accessToken.ts",[],["410","411"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/login-register/Register.tsx",["412"],"import React, { useEffect, useState, Fragment, useRef } from 'react'\nimport { Link, withRouter} from \"react-router-dom\"\n// GraphQL\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { MY_ACCOUNT } from \"../../graphql/queries\";\nimport { REGISTER_USER , LOGIN_USER } from \"../../graphql/mutations\";\n// Components\nimport { setAccessToken } from '../../accessToken';\n\ninterface ComponentProps {\n    history: any\n}\n\nconst Register = ({history}: ComponentProps) => {\n    const [loggingIn, setLogging] = useState(false);\n    const [formData, setFormData] = useState({\n        email : \"\", \n        password: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        day: \"\",\n        month: \"\",\n        year: \"\" });\n    const [passwordErrors , setPasswordErrors] = useState(\"\");\n    const [emailError, setEmailError] = useState(\"\")\n    const [nameErrors, setNameErrors] = useState(\"\")\n    const [dobErrors, setDobErrors] = useState({\n        day: \"\",\n        month: \"\",\n        year: \"\",\n        all: \"\"\n    })\n    const [passwordType, setPasswordType] = useState(\"password\")\n    const [showOrHide, setShowOrHide] = useState(\"show\")\n    const [passwordFocus, setPasswordFocus] = useState(false)\n    const [register] = useMutation(REGISTER_USER);\n    const [login] = useMutation(LOGIN_USER);\n    const { data, loading } = useQuery(MY_ACCOUNT)\n    \n    \n    useEffect(() => {\n        // Checking if user is authenticated and that theyre not logging in \n        // To see whether to push user off the route\n        if(loggingIn === false && !loading && data && data.me) {\n            history.push(\"/feed\");\n        }\n    }, [loggingIn, loading, data, history])\n\n    const onEmailChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n        setFormData({...formData, [e.target.name] : e.target.value})\n        // Email validation : If email doesn't include a @ then set email errors\n        const emailSign: any = /@/g;\n        if(!e.target.value.match(emailSign)) {\n            setEmailError(\"Email must include @\")\n        } else {\n            setEmailError(\"\")\n        }\n    }\n\n    const onChange = (e:any) => {\n        setFormData({...formData, [e.target.name] : e.target.value});\n        const value = e.target.value;\n        // Password validation \n        if(e.target.name === \"password\") {\n            const lowerCaseLetters: any = /[a-z]/g;\n            const upperCaseLetters: any = /[A-Z]/g;\n            const numbers: any  = /[0-9]/g;\n            // Does password contain a lowercase letter\n            if(!value.match(lowerCaseLetters)) {  \n                setPasswordErrors(\"Password must contain a lower case letter\");\n            }\n            // Does password contain an uppercase letter\n            if(!value.match(upperCaseLetters)) {  \n                setPasswordErrors(\"Password must contain an Upper case letter\");\n            }\n            // Does password contain a number\n            if(!value.match(numbers)) {  \n                setPasswordErrors(\"Password must contain a number\");\n            }\n            // Does password contain 8 or more characters\n            if(value.length < 8) {\n                setPasswordErrors(\"Password must contain 8 or more characters\");\n            }\n            // If passed valdiation set errors to empty\n            if(value.match(lowerCaseLetters) && value.match(upperCaseLetters) && value.match(numbers) && value.length >= 8) {\n                setPasswordErrors(\"\");\n            }\n        }\n        let number;\n        // Validating the day of birth and parsing as integar\n        if(e.target.name === \"day\") {\n            number = parseInt(value);  \n            // Check if number is between 1 and 31\n            if(number < 1 || number > 31 ) {\n                setDobErrors({...dobErrors, day: \"Enter a correct day\"})\n            } else {\n                setDobErrors({...dobErrors, day: \"\"})\n            }\n        }\n        // Validating the year of birth and parsing as integar\n        if(e.target.name === \"year\") {\n            number = parseInt(value);\n            // Getting current year\n            var d = new Date();\n            var year = d.getFullYear();\n            // Check if number entered is above 1900 and under the current year\n            if(number < 1900 || number > year ) {\n                setDobErrors({...dobErrors, year: \"Enter a correct year\"})\n            } else {\n                setDobErrors({...dobErrors, year: \"\"})\n            }\n        }\n    }\n\n    const onSubmit =   (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        // Set logginIn state to true so the useEffect doesn't push us to /feed prematurely \n        setLogging(true);\n        const { email , password, firstName , lastName, day, month , year} = formData;\n        // Formatting the date of birth\n        let dob = \"\";\n        if(day !== \"\" &&  month !== \"\" && year !== \"\" ) {\n            dob = day + \" \" + month + \" \" + year\n        }\n        // If fields aren't empty and their are no errors then register user\n        if(emailError === \"\" && email !== \"\" && password !== \"\" && firstName !== \"\" && lastName !== \"\" && dob !== \"\" ) {\n            register({\n                variables: {\n                    email: email.toLowerCase(),\n                    password,\n                    firstName: firstName.toLowerCase(),\n                    lastName: lastName.toLowerCase(),\n                    dob\n                }\n            })\n            .then(async (res: any) => {\n                // If our response contains any errors then we handle them by setting the correct error state\n                if(res.data.register.email !== \"\" ) {\n                    setEmailError(res.data.register.email);\n                } else {\n                    setEmailError(\"\");\n                }\n                if(res.data.register.password !== \"\" ) {\n                    setPasswordErrors(res.data.register.password);\n                } else {\n                    setPasswordErrors(\"\");\n                }\n                // If repsonse is a success : log in the user and update MY_ACCOUNT cache\n                if(res.data.register.success === true)  {\n                    const response = await login({\n                        variables: {\n                            email: email.toLowerCase(),\n                            password,\n                        },\n                        update: (cache, { data: { login } } )=> {\n                            //Update cache with the login data\n                            cache.writeQuery({ \n                                query: MY_ACCOUNT,\n                                data : {\n                                    me : login.user\n                                } \n                            });          \n                        }\n                    })\n                    try {\n                        // If we have response data \n                        if (response?.data) {\n                        // Set access token to the header\n                        setAccessToken(response.data.login.accessToken)   \n                        // Push to feed \n                        history.push(\"/feed\")\n                        // Set logging back to false\n                        setLogging(false)\n                        }\n                    } catch(err) {\n                        console.log(err.message);\n                    }\n                }\n            })\n            . catch(err => {\n                console.log(err);\n            })\n        } else{\n            // Else if there are empty fields and errors handle correctly by setting the correct state\n            if(email === \"\") {\n                setEmailError(\"You must enter a valid email address.\");\n            } else if(emailError !== \"\")  {\n                setEmailError(\"You must enter a valid email address.\");\n            } else {\n                setEmailError(\"\");\n            }\n            if(password === \"\"){\n                setPasswordErrors(\"You must enter a password.\")\n            } else {\n                setPasswordErrors(\"\")\n            }\n            if(firstName === \"\"){\n                setNameErrors(\"You must enter a name.\")\n            } else {\n                setNameErrors(\"\")\n            }\n            if(day === \"\" || month === \"\" || year === \"\"){\n                setDobErrors({...dobErrors , all : \"You must enter a valid date of birth.\"})\n            }else {\n                setDobErrors({...dobErrors , all : \"\"})\n            }\n        }\n    }\n\n    const showPassword = (e:React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault()\n        if(passwordType === \"password\") {\n            setPasswordType(\"text\")\n            setShowOrHide(\"hide\")\n        } else {\n            setPasswordType(\"password\")\n            setShowOrHide(\"show\")\n        }\n    }\n\n    return (\n        <Fragment>\n            <div className=\"login-container\">\n                <h1>SocialSongs</h1>\n                <h2>Sign up to start creating projects and sharing with your mates</h2>\n                <form onSubmit={(e) => onSubmit(e)}>\n                    <span>\n                        <label htmlFor=\"email\">What's your email address?</label>\n                        <input \n                            type=\"text\" \n                            name=\"email\" \n                            id=\"email\"\n                            value={formData.email} \n                            placeholder=\"Enter Email\"\n                            style={ emailError ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                            onChange={e => onEmailChange(e)}/>\n                             { emailError && <p className=\"input-error\">{emailError}</p>}\n                    </span>\n                    <span>\n                        <label htmlFor=\"password\">Password</label>\n                        <input \n                            type={passwordType} \n                            name=\"password\" \n                            id='password'\n                            value={formData.password} \n                            placeholder=\"Enter Password\"\n                            style={ passwordErrors ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                            onFocus={() => setPasswordFocus(true)}\n                            onBlur={() => setPasswordFocus(true)}\n                            onChange={e => onChange(e)}/>\n                             { passwordErrors && <p className=\"input-error\">{passwordErrors}</p>}\n                             <button id=\"show-password\" onClick={(e) => showPassword(e)}>\n                                <img src={`/assets/icons/validate/${showOrHide}-password.svg`} alt=\"Show/hide password\"/>\n                            </button>\n                            <div className=\"password-warning\" style={passwordFocus === true ?{display: \"block\"} : {display: \"none\"}}>\n                                <p>Be cautious of the password you use, at this moment in time this is only a beta version of the application to demonstrate my development skills.</p>\n                            </div>\n                    </span> \n                    <span>\n                    <p className=\"label-p\">Have you got a name?</p>\n                        <span className=\"name-wrapper\">\n                            <span className=\"name-inputs\">\n                                <label htmlFor=\"firstName\">First Name</label>\n                                <input \n                                    type=\"text\" \n                                    name=\"firstName\" \n                                    id=\"firstName\"\n                                    value={formData.firstName} \n                                    placeholder=\"First name\"\n                                    style={ nameErrors ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)}/>\n                            </span>\n                            <span className=\"name-inputs lastName-wrapper\">\n                                <label htmlFor=\"lastName\">Last Name</label>\n                                <input \n                                    type=\"text\" \n                                    name=\"lastName\" \n                                    id=\"lastName\"\n                                    value={formData.lastName} \n                                    placeholder=\"Last name\"\n                                    style={ nameErrors ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)}/>\n                            </span>\n                        </span>\n                        { nameErrors && <p className=\"input-error\">{nameErrors}</p>}\n                    </span>\n                    <span>\n                        <p className=\"label-p\">What's your date of birth?</p>\n                        <span className=\"dob-wrapper\">\n                            <span className=\"dob-inputs day-wrapper\">\n                                <label htmlFor=\"day\">Day</label>\n                                <input \n                                    type=\"text\"\n                                    name=\"day\" \n                                    value={formData.day} \n                                    className=\"dob-input\"\n                                    id=\"day\"\n                                    placeholder=\"DD\"\n                                    maxLength={2}\n                                    style={  dobErrors.all || dobErrors.day !== \"\" ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)}/>\n                            </span>\n                            <span className=\"dob-inputs month-wrapper\">\n                                <label htmlFor=\"month\">Month</label>\n                                <select \n                                    name=\"month\" \n                                    id=\"month\" \n                                    required\n                                    aria-invalid=\"true\"\n                                    style={  dobErrors.all || dobErrors.month !== \"\" ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)} defaultValue={\"\"}>\n                                    <option disabled value=\"\"> Month</option>\n                                    <option value=\"January\">January</option>\n                                    <option value=\"February\">February</option>\n                                    <option value=\"March\">March</option>\n                                    <option value=\"April\">April</option>\n                                    <option value=\"May\">May</option>\n                                    <option value=\"June\">June</option>\n                                    <option value=\"July\">July</option>\n                                    <option value=\"August\">August</option>\n                                    <option value=\"September\">September</option>\n                                    <option value=\"October\">October</option>\n                                    <option value=\"November\">November</option>\n                                    <option value=\"December\">December</option>\n                                </select>\n                            </span>\n                                <span className=\"dob-inputs year-wrapper\">\n                                <label htmlFor=\"year\">Year</label>\n                                <input \n                                    type=\"text\" \n                                    name=\"year\" \n                                    value={formData.year} \n                                    className=\"dob-input\"\n                                    id=\"year\"\n                                    placeholder=\"YYYY\"\n                                    maxLength={4}\n                                    style={ dobErrors.all || dobErrors.year !== \"\" ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)}/>\n                            </span>\n                        </span>\n                        { dobErrors.day || dobErrors.month || dobErrors.year || dobErrors.all ? <p className=\"input-error\">Enter a valid date of birth</p> : null}\n                    </span>\n                    <input type=\"submit\" value=\"Register\" className=\"submit-btn\" id=\"register-submit\"/>\n                    <p className=\"login-p\">Already have an account? <Link to=\"/login\" className=\"login-link\">Login</Link></p>\n                </form>\n            </div>\n         </Fragment>\n    );\n}\n\nexport default withRouter(Register);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/projects/Projects.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/landing/Landing.tsx",[],["413","414"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/discover/Discover.tsx",["415"],"import React, { Fragment } from 'react'\nimport { Link } from \"react-router-dom\";\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport {MY_ACCOUNT, ALL_POSTS} from \"../../graphql/queries\";\n// Components\n// import DiscoverPost from \"../../components/post/DiscoverPost\";\nimport CreateComponent from \"../../components/create/CreateComponent\"\nimport MyPost from \"../../components/post/posts/MyPost\";\nimport UsersPost from \"../../components/post/posts/UsersPost\";\nimport MySharedProject from \"../../components/post/sharedProject/MySharedProject\";\nimport UserSharedProject from \"../../components/post/sharedProject/UserSharedProject\";\nconst Discover: React.FC = () => {\n  const { data, loading, error } = useQuery(ALL_POSTS);\n  const { data: meData, loading: meLoading } = useQuery(MY_ACCOUNT);\n    return (\n      <div className=\"component-container\">\n        <div className=\"feed-flex\">\n          <CreateComponent />\n          {!loading && data && data.allPosts.length !== 0  ?\n              <ul>\n                {data.allPosts.map((post: any) => \n                <li key={post.post.id}>\n                  { post.project !== null ?\n                    <Fragment> \n                    { !meLoading && meData && meData.me.id === post.post.creatorId ? \n                      <MySharedProject post={post} />  :\n                      <UserSharedProject post={post} /> \n                    }\n                   </Fragment>\n                  :\n                  <Fragment> \n                  { !meLoading && meData && meData.me.id === post.post.creatorId ? \n                    <MyPost post={post} />  :\n                    <UsersPost post={post} /> \n                  }\n                 </Fragment>\n                }\n                  </li> )}\n              </ul> : \n              <div className=\"no-posts\">\n                <p>There are no posts on your feed. Check out the <Link to=\"/discover\">Discover</Link> page and find some new mates. </p>\n              </div> }\n                  \n        </div>\n      </div> \n    );\n}\n\nexport default Discover;","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/request/RequestResult.tsx",[],["416","417"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/header/Header.tsx",["418"],"import React, {useState, Fragment, useEffect} from 'react'\nimport { useLocation } from \"react-router-dom\";\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport { MY_ACCOUNT, GET_NOTIFICATIONS, USER_BY_ID } from \"../../graphql/queries\";\n// Redux\nimport {connect, ConnectedProps} from \"react-redux\";\n// Components\nimport DropDown from \"../navigation/DropDown\";\nimport AccountOptions from \"./AccountOptions\";\nimport Notifications from \"../notifications/Notifications\";\nimport Search from \"./Search\";\nimport CreateOptions from './CreateOptions';\n\ninterface ComponentProps {\n  application:  {\n    location: string,\n    settingsPanel: boolean,\n    postPanel : boolean,\n    projectPanel: boolean,\n    notificationPanel : boolean,\n    searchPanel: boolean,\n    createPanel: boolean,\n    navbar: boolean,\n  },\n  user : {\n    authenticated: boolean,\n    user : {\n      id: number\n    }\n  }\n  LoggedIn: string,\n  Guest: string\n}\n\nconst mapStateToProps = (state: ComponentProps) => ({\n  location : state.application.location,\n  settingsPanel: state.application.settingsPanel,\n  postPanel : state.application.postPanel,\n  projectPanel: state.application.projectPanel,\n  notificationPanel: state.application.notificationPanel,\n  searchPanel: state.application.searchPanel,\n  createPanel: state.application.createPanel,\n  authenticated: state.user.authenticated,\n  user: state.user.user,\n  navbar: state.application.navbar\n})\n\nconst mapDispatch = {\n  closeSettingsPanel : (payload: boolean) => ({ type: \"CLOSE_SETTINGS_PANEL\", payload }),\n  closePostPanel : (payload: boolean) => ({ type: \"CLOSE_POST_PANEL\", payload }),\n  intialiseProject: (bool: boolean ) => ({type: \"INIT_PROJECT\", payload: bool }),\n  toggleNotifications : (payload: boolean) => ({ type: \"TOGGLE__NOTIFICATIONS\", payload }),\n  toggleSearch : (payload: boolean) => ({ type: \"TOGGLE_SEARCH\", payload }),\n  toggleCreatePanel: (payload: boolean) => ({type: \"TOGGLE_CREATE_PANEL\", payload}),\n  toggleNavbar: (payload: boolean) => ({ type: \"NAVBAR_TOGGLE\", payload })\n}\n\nconst connector = connect(mapStateToProps, mapDispatch);\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\nconst Header = ({navbar, location, createPanel, user, postPanel, projectPanel,settingsPanel, notificationPanel, searchPanel, toggleNotifications, closePostPanel, intialiseProject, closeSettingsPanel, toggleSearch, toggleCreatePanel, toggleNavbar} : Props) => {\n  const [btnDetails, setBtnDetails] = useState(\"\")\n  const [unRead, setUnRead]= useState(0)\n  const [toggleMenu, setToggleMenu] = useState(false);\n  const [componentLocation, setComponentLocation] = useState(\"\");\n  const { loading, data } = useQuery(MY_ACCOUNT);\n  const { loading: userLoading, data: userData } = useQuery(USER_BY_ID, {\n    variables : {\n      userId: user?.id\n    }\n  })\n  const { loading: notifLoading, data: notifData } = useQuery(GET_NOTIFICATIONS);\n  const routeLocation = useLocation();\n  var pathname = routeLocation.pathname;\n\n  useEffect(() => {\n    if(pathname !== componentLocation) {\n      setComponentLocation(pathname);\n      setToggleMenu(false);\n    }\n    if(!notifLoading && notifData && notifData.notifications) {\n      setUnRead(notifData.notifications.length)\n      }       \n\n  }, [user,notifLoading, notifData, loading , data, pathname, componentLocation, toggleNavbar])\n\n\n  if(loading) {\n    return <div>Loading...</div>\n  }\n  \n  const openOptionsMenu = () => {\n    if(settingsPanel === false) {\n      closeSettingsPanel(true);\n    } else if(settingsPanel === true) {\n      closeSettingsPanel(false);\n    }\n  }\n\n  const createPost = () => {\n    if(postPanel === false) {\n      closePostPanel(true)\n    } else {\n      closePostPanel(false)\n    }\n  }\n  const createProject = () => {\n    if(projectPanel === false) {\n      intialiseProject(true)\n    } else {\n      intialiseProject(false)\n    }\n  } \n  const openNotifications = () => {\n    if(notificationPanel === false) {\n      toggleNotifications(true)\n    } else {\n      toggleNotifications(false)\n    }\n  }\n\n  const openSearchContainer = () => {\n    if(searchPanel === false) { \n        toggleSearch(true)   \n    } else {\n      toggleSearch(false)   \n    }\n  }\n\n  const openBurgerMenu = () => {\n    if(navbar === true ) {\n      toggleNavbar(false)\n    } else {\n      toggleNavbar(true)\n    }\n  }\n  const openCreateMenu = () => {\n    if(createPanel) {\n      toggleCreatePanel(false)\n    } else {\n      toggleCreatePanel(true)\n    }\n  }\n      return (\n        <Fragment>\n          <div className=\"app-header\">\n            <div className=\"header-wrapper\">\n              <div className=\"aligned-left\">\n                {/* <h3 className=\"logo\">Space</h3> */}\n                <span id=\"left-btns\" style={location === \"workspace\" ?{display:\"flex\"} : {display:\"\"} }>\n                <span className=\"header-btn-wrapper\">\n                  <button\n                    className=\"header-btns\"\n                    onClick={() => openSearchContainer()}\n                    onMouseOver={() => setBtnDetails(\"Search\")}\n                    onMouseOut={() =>  setBtnDetails(\"\")}>\n                      <img src=\"/assets/icons/menu/search-btn.svg\" alt=\"Search\"/>\n                      { btnDetails === \"Search\" && <div className=\"btn-info\">\n                    <p>{btnDetails}</p></div>}\n                  </button>\n                  </span>\n                  <span className=\"header-btn-wrapper\" >\n                  <button \n                    className=\"header-btns\"\n                    onClick={() => openBurgerMenu()}\n                    onMouseOver={() => setBtnDetails(\"Menu\")}\n                    onMouseOut={() =>  setBtnDetails(\"\")}>\n                      <img src=\"/assets/icons/menu/burger.svg\" alt=\"Open Menu\"/>\n                      { btnDetails === \"Menu\" && <div className=\"btn-info\">\n                      <p>{btnDetails}</p></div>}\n                  </button>\n                </span>\n                </span>\n                <span className=\"header-btn-wrapper\" id=\"search-to-hide\">\n                  <button\n                    className=\"header-btns\"\n                    onClick={() => openSearchContainer()}\n                    onMouseOver={() => setBtnDetails(\"Search\")}\n                    onMouseOut={() =>  setBtnDetails(\"\")}\n                    style={location === \"workspace\" ?{display:\"none\"} : {display:\"block\"}}>\n                      <img src=\"/assets/icons/menu/search-btn.svg\" alt=\"Search\"/>\n                      { btnDetails === \"Search\" && <div className=\"btn-info\">\n                    <p>{btnDetails}</p></div>}\n                  </button>\n                  </span>\n\n              </div>\n              <img src=\"/assets/icons/logo/logo-white.svg\" alt=\"Foliotune Logo\" className=\"header-logo\"/>\n              <div className=\"aligned-right\">\n              <span className=\"header-btn-wrapper\"  id=\"create-project-btn\" >\n                <button \n                  className=\"header-btns\" \n                  onClick={() => createProject()}\n                  onMouseOver={() => setBtnDetails(\"Create Project\")}\n                  onMouseOut={() =>  setBtnDetails(\"\")}>\n                  <img src=\"/assets/icons/menu/create-projects.svg\" alt=\"Create Project\"/>\n                  { btnDetails === \"Create Project\" && \n                  <div className=\"btn-info\">\n                     <p>{btnDetails}</p>\n                  </div>}\n                </button>\n                </span>\n                <span className=\"header-btn-wrapper\"   id=\"create-post-btn\" >\n                <button \n                  className=\"header-btns\" \n                  onClick={() => createPost()}\n                  onMouseOver={() => setBtnDetails(\"Create Post\")}\n                  onMouseOut={() =>  setBtnDetails(\"\")}>\n                  <img src=\"/assets/icons/menu/post.svg\" alt=\"Create Post\"/>\n                  { btnDetails === \"Create Post\" && <div className=\"btn-info\">\n                  <p>{btnDetails}</p></div>}\n                </button>\n                </span> \n                <span className=\"header-btn-wrapper\"    id=\"notifcations-btn\" >\n                <button \n                  className=\"header-btns\"        \n                  onClick={() => openNotifications()}\n                  onMouseOver={() => setBtnDetails(\"Notficiations\")}\n                  onMouseOut={() =>  setBtnDetails(\"\")}>\n                  <img src=\"/assets/icons/menu/notifications.svg\" alt=\"Notifications\"/>\n                  {unRead !== 0 && <div className=\"unread-notifications\">{unRead}</div>} \n                  { btnDetails === \"Notficiations\" && <div className=\"btn-info\">\n                    <p>{btnDetails}</p></div>}\n                </button>  \n                {notificationPanel === true ? <Notifications /> : null}\n                </span>\n                <span className=\"header-btn-wrapper\"    id=\"create-btn\" >\n                <button \n                    className=\"header-btns\" \n                    onClick={() => openCreateMenu()}\n                    onMouseOver={() => setBtnDetails(\"Create\")}\n                    onMouseOut={() =>  setBtnDetails(\"\")}>\n                    <img src=\"/assets/icons/menu/create.svg\" alt=\"Create Project\"/>\n                  { btnDetails === \"Create\" && <div className=\"btn-info\">\n                    <p>{btnDetails}</p></div>}\n                </button>\n                {createPanel && <CreateOptions />}\n                </span>\n                <span className=\"header-btn-wrapper\"   id=\"settings-btn\" >\n                <button \n                    className=\"header-btns\" \n                    onClick={() => openOptionsMenu()} \n                    onMouseOver={() => setBtnDetails(\"Options\")}\n                    onMouseOut={() =>  setBtnDetails(\"\")}>\n                  <img src=\"/assets/icons/menu/settings.svg\" alt=\"settings\"/>\n                  { btnDetails === \"Options\" && <div className=\"btn-info\">\n                    <p>{btnDetails}</p></div>}\n                </button>\n                </span>\n                { !loading && data && data.me && \n                  <img src={data.me.avatar} className=\"profile-avatar\"  id=\"avatar\"  alt=\"Profile Avatar\"/>}\n                {!loading && data && data.me === null && !userLoading && userData && userData.user  && <img src={userData.user.avatar} className=\"profile-avatar\" alt=\"Profile Avatar\"/>}\n              </div>\n              {settingsPanel === true  ? <AccountOptions/> : null}\n              {searchPanel === true && <Search />}\n            </div>\n          </div>\n            { navbar === true && <DropDown></DropDown>}\n       </Fragment>\n      )}\n\nexport default connector(Header);\n","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/application/reducers.ts",[],["419","420"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/profile/reducers.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/graphql/mutations.ts",[],["421","422"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/searchResult/lists/Projects.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/header/Search.tsx",["423"],"import React, { useState, useEffect, Fragment, useRef } from 'react'\nimport { Link, useLocation, withRouter } from \"react-router-dom\"\n// GraphQL\nimport { useQuery } from \"@apollo/client\"\nimport { SEARCH_APPLICATION } from \"../../graphql/queries\"\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\"\n\ninterface ComponentProps {\n  application : {\n    searchPanel: boolean\n  }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  searchPanel: state.application.searchPanel\n}) \n\nconst mapDispatch = {\n  toggleSearch : (payload: boolean) => ({ type: \"TOGGLE_SEARCH\", payload: payload })\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {\n  history : any\n}\n\nconst Search = ({toggleSearch, searchPanel, history}: Props) => {\n  const [ searchData, setSearchData ] = useState({ search: \"\" })\n  const [routeLocation, setLocation] = useState(\"\")\n  const [indexLimit, setIndexLimit] = useState(8);\n  const { data, loading } = useQuery(SEARCH_APPLICATION, {\n    variables: {\n      input : searchData.search.toLowerCase()\n    }\n  })\n  const location = useLocation();\n  const searchInput = useRef(null);\n\n  useEffect(() => {\n    let pathname = location.pathname;\n    if(routeLocation !== \"\" && pathname!== routeLocation) {\n      toggleSearch(false)\n      setLocation(pathname)\n    } else {\n      setLocation(pathname)\n    }\n\n  }, [location, routeLocation, toggleSearch])\n\n  const closeContainer = () => {\n    if(searchPanel === true ) {\n      toggleSearch(false);\n    } else {\n      toggleSearch(true);\n    }\n  }\n  const onChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setSearchData({...searchData, search: e.target.value })\n  }\n\n  const onSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    history.push(`/search/${searchData.search.toLowerCase()}`)\n  }\n\n  return (\n    <div className=\"search-container\">\n      <span className=\"flex-wrapper\">\n        <button className=\"header-btns\" onClick={() => closeContainer()}>\n          <img src=\"/assets/icons/menu/back.svg\" alt=\"back\"/>\n        </button>\n        <form id=\"search-form\" onSubmit={(e) => onSubmit(e)}>\n          <input autoFocus ref={searchInput} type=\"text\" id=\"search-bar\" placeholder=\"Search projects, people and bands\" value={searchData.search} onChange={(e) => onChange(e)}/>\n        </form>\n      </span>\n      { searchData.search !== \"\" && \n        <ul className=\"search-list\">\n           { !loading && data && data.searchApplication.users.length !== 0 && \n           <Fragment>\n            <span className=\"list-headings\">\n            <h3>Users</h3>\n            <Link to={`/search/${searchData.search}`} className=\"see-more\">See more</Link>\n            </span>\n              { data.searchApplication.users.map((user: any, index: number) => \n              <Fragment key={user.id}>\n                { index < indexLimit &&\n                    <li key={user.id} >\n                    <Link to={`/profile/${user.id}`}  className=\"search-link\"> </Link>\n                      <span>\n                        <img src={user.avatar} alt=\"Users avatar\"/>\n                      </span>\n                      <p className=\"username\">{user.firstName}</p>\n                  </li>\n                 }\n              </Fragment>\n              )}  \n          </Fragment> }\n          { !loading && data && data.searchApplication.projects.length !== 0 && <Fragment>\n            <span className=\"list-headings\">\n              <h3>Projects</h3>\n              <Link to={`/search/${searchData.search}`} className=\"see-more\">See more</Link>\n            </span>\n            {data.searchApplication.projects.map((project: any, index: number) => \n            <Fragment key={project.id}>\n              { index < indexLimit &&\n             <li key={project.id}>\n              <Link to={`/workspace/${project.id}`} className=\"search-link\"></Link>\n                <span>\n                  <img className=\"project-icon\" src=\"/assets/icons/menu/projects.svg\" alt=\"Project icon\"/>\n                </span>\n                <p>{project.name}</p>\n                <Link to={`/profile/${project.creatorId}`} className=\"creator\">by <em>{project.creatorName}</em></Link>\n              </li>\n            }\n            </Fragment> \n          )}\n          </Fragment> }\n        </ul>\n      }\n    </div>\n  )\n}\n\nexport default withRouter(connector(Search));","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/posts/Posts.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/navigation/DropDown.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/posts/UsersPost.tsx",["424"],"import React, { useState } from 'react'\nimport { Link } from \"react-router-dom\"\n// Components \nimport Comment from \"../comments/Comment\";\nimport FormatTimestamp from \"../../formatTime/FormatTimestamp\"\nimport LikePost from \"../like/LikePost\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\ninterface ComponentProps  {\n  application : {\n    options: string\n  }\n}\nconst mapState = (state: ComponentProps) => ({\n  options: state.application.options,\n})\n\nconst mapDispatch = {\n  toggleOptions: (postId: string) => ({type: \"PROJECT_OPTIONS\", payload: postId}),\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {\n  post : { \n    post: {\n      id: number\n      creatorId : string\n      avatar: string\n      created: number\n      content: string\n      creatorName: string\n    }\n    project: {\n      id: string\n      mainTrack: string\n    }\n    comments: [{\n      id: number\n      postId:  number\n      userId:  number\n      userName: string\n      comment: string\n      created : number\n      avatar : string\n    }]\n    likes : [{\n      id : number\n      postId: number\n      userId: string\n    }]\n  }\n}\n\n\nconst UsersPost = ({ post, options, toggleOptions }: Props ) => {\n  const [ postIdForComment, setIdForComments ] = useState(0)\n\n  const toggleOptionsMenu = (id: number) => {\n    if(options === \"\") {\n      toggleOptions(\"dssd\")\n    } else {\n      toggleOptions(\"\")\n    }\n  }\n  const openComments = (postId: number) => {\n    if(postIdForComment === postId) {\n     setIdForComments(0)\n    } else {\n     setIdForComments(postId)\n    }\n  }\n\n  return (\n    <div className=\"post\">\n      <div className=\"post-top-wrapper\">\n        <div className=\"avatar\">\n          <img src={post.post.avatar} alt=\"User's Avatar\"/>\n        </div>\n        <span className=\"post-name-wrapper\">\n          <Link to={`/profile/${post.post.creatorId}`} className=\"post-name post-user\">{post.post.creatorName}</Link>\n          <FormatTimestamp timestamp={post.post.created} />\n        </span> \n        <span className=\"post-btn-wrapper\"> \n          <LikePost id={post.post.id} />\n        </span>\n      </div>\n    <div className=\"post-content\"><p>{post.post.content}</p></div>\n    <div className=\"post-bottom-wrapper\">\n      <button onClick={() => openComments(post.post.id)} className=\"comment-button\">Comments</button>\n        <p className=\"comments-length\">{post.comments.length}</p>\n      <div className=\"likes\"> \n        <img src=\"/assets/icons/post/thumb.svg\" alt=\"Likes\"/>\n        <p>{post.likes.length}</p>\n      </div>\n    </div>\n    {postIdForComment === post.post.id ? <Comment postId={post.post.id} /> : null}\n  </div> \n  )\n}\n\nexport default connector(UsersPost);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/me/Posts.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/edit/Bio.tsx",[],["425","426"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tracks/Recording.tsx",["427"],"import React, {useState, Fragment} from 'react'\nimport axios from \"axios\";\n// GraphQL\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { MY_ACCOUNT, GET_TRACKS } from \"../../../graphql/queries\";\nimport { CREATE_TRACK, DELETE_TRACK } from \"../../../graphql/mutations\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst MicRecorder = require('mic-recorder-to-mp3');\n\ninterface ComponentProps {\n  playbar: {\n    data : object\n  }\n  project: {\n    currentProject: string\n  }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  data: state.playbar.data,\n  currentProject: state.project.currentProject\n})\n\nconst mapDispatch = {\n  assignTrack: (data: any) => ({type: \"ASSIGN_TRACK\", payload: data })\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\nvar counter: number;\nconst Recording  = ({currentProject} : Props) => {\n  const [trackForm, setTrackForm] = useState({\n    name: \"\"\n  })\n  const [initForm, setForm] = useState(false);\n  const [audioBuffer, storeBuffer] = useState([]);\n  const [loadingSave, setLoadingSave] = useState(false);\n  const [recording, setRecording] = useState(false);\n  const { data: meData } = useQuery(MY_ACCOUNT);\n  const [ createTrack ] = useMutation(CREATE_TRACK);\n  const [deleteTrack] = useMutation(DELETE_TRACK);\n  //New instance\nconst recorder = new MicRecorder({\n  bitRate: 128\n});\n\n// Start recording. Browser will request permission to use your microphone.\nconst startRecording = () => {\n  if(counter === 0 || counter === undefined) {\n      recorder.start().then(() => {\n      }).catch((e: any) => {\n        console.error(e);\n      });\n      return counter = 1;\n  } else if(counter === 1) {\n  // Stop recording\n  recorder\n  .stop()\n  .getMp3().then(([buffer, blob]: any) => {\n    // Store buffer in component state\n    storeBuffer(buffer);\n    // Open Form pop up\n    setForm(true);\n}).catch((err: any) => {\n  alert('We could not retrieve your message');\n  console.log(err);\n});\nreturn counter = 0;\n  }\n}\n\nconst onChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n  setTrackForm({...trackForm, [e.target.name] : e.target.value })\n}\n\nconst onSubmit = async (e:React.FormEvent<HTMLFormElement>) => {\n  e.preventDefault();\n  setLoadingSave(true);\n  // Create Track name\n  const trackName = trackForm.name;\n  // Create New file\n  const newAudioFile = new File(audioBuffer, trackName, {\n    type: \"audio/mp3\",\n    lastModified: Date.now(),\n  });\n\n  var newFormData = new FormData();\n  newFormData.append(\"userId\", meData.me.id);\n  newFormData.append(\"users-audio\", newAudioFile);\n  newFormData.append(\"projectId\", currentProject);\n\n  const response = await createTrack({\n    variables: {\n      name: trackName,\n      projectId: currentProject\n  }, update : (cache , { data: { createTrack }}) => {\n      const cacheTracks: any = cache.readQuery({\n        query: GET_TRACKS,\n        variables : {\n            projectId: currentProject\n          },\n      });\n      if(cacheTracks.tracks !== null) {\n        let modifyCache = [...cacheTracks.tracks, createTrack]\n        cache.writeQuery({\n          query: GET_TRACKS,\n          variables : {\n              projectId: currentProject\n            },\n            data: {\n              tracks : modifyCache\n            }\n        })\n      }\n  }})\n\n  try {\n    if(response.data.createTrack) {\n      newFormData.append(\"trackId\", response.data.createTrack.id);\n      axios({\n        method: \"post\",\n        url: 'http://localhost:4000/upload',\n        data: newFormData,\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      })\n        .then((_res: any) => {\n          //handle success\n          setLoadingSave(false);\n          setTrackForm({ name: \"\"});\n          setForm(false);\n        })\n        .catch(async (res: any) => {\n          //handle error\n          console.log(res);\n          // If there is an error sending the file to S3\n          // Remove the correlated track data with GraphQL\n          await deleteTrack({\n            variables: {\n              projectId: currentProject,\n              trackId: response.data.createTrack.id\n            },\n            update: (cache, { data: deleteTrack }) => {\n              cache.writeQuery({\n               query: GET_TRACKS, \n                variables : {\n                  projectId : currentProject\n                }, \n                data: {\n                  tracks : deleteTrack\n                }\n              })\n            }\n          })\n        });\n    }\n  } catch(err) {\n    console.log(err)\n  }\n}\n  return (\n    <Fragment>\n          <button onClick={() => startRecording()} className=\"create-btns\" id=\"record\">\n          { recording ? <img src=\"/assets/icons/workspace/recording.svg\" alt=\"Recording\"/>:    \n          <img src=\"/assets/icons/workspace/record.svg\" alt=\"Record\"/> }\n        </button>\n      {  initForm ===  true &&\n        <div className=\"track-popup\">\n          <form onSubmit={(e) => onSubmit(e)}>\n            <span>\n              <label htmlFor=\"trackName\">Name your track</label>\n              <input type=\"text\" name=\"name\" id=\"trackName\" value={trackForm.name} placeholder=\"Enter a track name.\" onChange={(e) => onChange(e)}/>\n            </span>\n            <input type=\"submit\" value=\"Save Track\"/>\n          </form>\n        </div>\n      }\n      {loadingSave ? <div className=\"loading-save\">Loading...</div> : null }\n      </Fragment>\n  )\n}\n\nexport default connector(Recording);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/components/ProjectsHeader.tsx",["428","429","430"],"import React, { useRef , useState, Fragment} from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { MY_ACCOUNT, SEARCH_PROJECTS } from \"../../../graphql/queries\";\n// Redux \nimport { connect, ConnectedProps } from \"react-redux\";\n// Components \nimport SearchProjects from \"./SearchProjects\";\n\ninterface ComponentProps {\n application : {\n   projectPanel: boolean\n }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  projectPanel: state.application.projectPanel\n})\n\nconst mapDispatch = {\n  intialiseProject: (bool: boolean ) => ({type: \"INIT_PROJECT\", payload: bool }),\n}\n\nconst connector = connect(mapState, mapDispatch)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\ntype Props = PropsFromRedux;\nconst ProjectsHeader = ({projectPanel, intialiseProject} : Props) => {\n  const [searchData, setSearchData] = useState({\n    search: \"\"\n  })\n  const searchInput = useRef<HTMLInputElement>(null); \n\n  const toggleProjectPanel = () => {\n    if(projectPanel === true) {\n      intialiseProject(false)\n    } else {\n      intialiseProject(true)\n    }\n  }\n\n  const onChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setSearchData({...searchData , search: e.target.value})\n  } \n\n  const onSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n  }\n\n  const focusInput = () => {\n    if(searchInput && searchInput.current) {\n      searchInput.current.focus()\n    }\n  }\n  return (\n    <Fragment>\n    <div className=\"projects-header\">\n      <form onSubmit={(e) => onSubmit(e)}>\n        <span className=\"input-wrapper\">\n      { searchData.search !== \"\"  ?\n          <button className=\"clear-btn\" onClick={() => setSearchData({search: \"\"})}>\n            <img src=\"/assets/icons/menu/clear.svg\" alt=\"Clear search\"/>\n          </button>\n          :\n          <button className=\"focus-btn\" onClick={() => focusInput()}>\n            <img src=\"/assets/icons/menu/search-blue.svg\" alt=\"Search\"/>\n          </button>\n        }\n        <input \n          type=\"text\"\n          id=\"search\"\n          name=\"search\"\n          value={searchData.search}\n          placeholder=\"Search projects\"\n          onChange={(e) => onChange(e)}\n          ref={searchInput}\n          />\n          </span>\n      </form>\n          <div className=\"right\">\n            <button onClick={() => toggleProjectPanel()}> \n              <img src=\"/assets/icons/create/project-create.svg\" alt=\"Create Project\" />\n              <p>Create Project</p>\n            </button>\n          </div>\n    </div>\n    { searchData.search !== \"\"  &&  <SearchProjects searchInput={searchData.search}/> }\n    </Fragment>\n  )\n}\nexport default connector(ProjectsHeader);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tabs/Tabs.tsx",["431","432"],"import React,  { useState, useEffect } from 'react'\nimport { v4 as uuid } from \"uuid\";\n\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport { GET_TABS } from \"../../../graphql/queries\";\n// Redux\nimport {connect, ConnectedProps } from \"react-redux\";\n// Components\nimport CreateTabs from \"./CreateTabs\";\nimport DeleteWSItem from \"../DeleteWSItem\";\ninterface ComponentProps {\n  workspace: {\n   tabs: {\n     create: boolean,\n     delete: boolean\n   }\n  }\n  project: {\n    currentProject: string\n  }\n}\n\nconst mapState = (state : ComponentProps) => ({\n  currentProject: state.project.currentProject,\n  tabs: state.workspace.tabs\n})\n\nconst mapDispatch = {\n  initTabCreation : (bool: boolean) => ({type: \"INIT_AND_EXIT_TAB_CREATION\", payload: bool}),\n  initTabDeletion : (bool: boolean) => ({type: \"DELETE_TAB\", payload: bool}),\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\n\nconst Tabs = ({initTabCreation, initTabDeletion, currentProject, tabs}: Props) => {\n  const [currentTab ,setCurrentTab] = useState(-1);\n  const { data, loading } = useQuery(GET_TABS, {\n    variables: {\n      projectId: currentProject\n    }\n  });\n\n  const createTabPanel = () => {\n    initTabCreation(true)\n  }\n  const deleteTabPanel = (id: number) => {\n    setCurrentTab(id);\n    initTabDeletion(true);\n  }\n\n  return (\n    <div className=\"tabs-container\">\n      <div className=\"lyric-tab-header\">\n          <h5>Tabs</h5>\n          {/* <button className=\"add-btn\" onClick={() => createTabPanel()}>\n            <img src=\"/assets/icons/workspace/add.svg\" alt=\"Add Lyric\"/>\n          </button> */}\n        </div>\n      {  tabs.create === true ? <CreateTabs></CreateTabs> : null}\n        <div className=\"lyric-tab-scroll-container\">\n          { !loading && data && data.tabs && data.tabs.length !== 0 ? data.tabs.map((tab :any) => \n             <li key={tab.id} className=\"tab-container\">\n             <div className=\"lyric-tab-top\">\n               <p>{tab.description}</p>\n               <div className=\"button-container\">\n                 <button  onClick={() => deleteTabPanel(tab.id)}>\n                   <img src=\"/assets/icons/workspace/delete.svg\" alt=\"Delete Lyric\"/>\n                 </button>\n                 <button className=\"edit-btn\">\n                   <img src=\"/assets/icons/workspace/edit.svg\" alt=\"Edit Lyric\"/>\n                 </button>\n               </div>\n             </div>\n             <div className=\"tab-grid\">\n               <div className=\"grid-lines\">\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n               </div>\n                {  tab.tab.map((item: any) => \n                 <span key={uuid()}>\n                    <p>{ item === -1 ? \"\" : item}</p>\n                 </span> \n                )}\n             </div>\n             {tabs.delete && currentTab === tab.id && <DeleteWSItem wsType=\"tab\" itemId={tab.id}/>}\n         </li> ) : \n         <li className=\"default-workspace\">\n           <p>Add a tab</p>\n           <button onClick={() => initTabCreation(true)}>Create</button>\n          </li>\n         }\n    </div>\n    </div>\n  )\n}\n\nexport default connector(Tabs);\n","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/profile/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/project/UsersProject.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/formatTime/FormatTimestamp.tsx",["433"],"import React, { useState, useEffect } from 'react'\n\ninterface ComponentProps {\n  timestamp : any\n}\n\nfunction FormatTimestamp({ timestamp }: ComponentProps ) {\n    const [formattedTime , setFormattedTime] = useState(\"\")\n\n    useEffect(() => {\n      formatTimestamp();\n    }, [])\n\n    const formatTimestamp = () => {\n      const splitDateAndTime = timestamp.split(\"T\")\n      const date = splitDateAndTime[0].split(\"-\");\n      const time =  splitDateAndTime[1].split(\":\");\n      const hourAndMin = time[0] + \":\" + time[1];\n      var month;\n      switch(date[1]){\n        case \"01\" : month = \"January\"; break;\n        case \"02\" : month = \"Febraury\"; break;\n        case \"03\" : month = \"March\"; break;\n        case \"04\" : month = \"April\"; break;\n        case \"05\" : month = \"May\"; break;\n        case \"06\" : month = \"June\"; break;\n        case \"07\" : month = \"July\"; break;\n        case \"08\" : month = \"August\"; break;\n        case \"09\" : month = \"September\"; break;\n        case \"10\" : month = \"October\"; break;\n        case \"11\" : month = \"November\"; break;\n        case \"12\" : month = \"December\"; break;  \n      };\n      const year = date[0].split(\"\")\n      const yearAbbr = year[2] + year[3];\n      const fullDate = date[2] +  \" \" + month + \" \" + yearAbbr;\n      const displayTimestamp = fullDate + \" at \" + hourAndMin;\n      setFormattedTime(displayTimestamp);\n    }\n\n     return (\n      <p className=\"post-date\">{formattedTime}</p>\n     )\n}\n\nexport default FormatTimestamp;","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/components/EmptyState.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/DeleteWSItem.tsx",[],["434","435"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tabs/CreateTabs.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/contributors/ContributorPanel.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/functions/Share.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/contributors/RemoveContributor.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/Workspace.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/playbar/Playbar.tsx",["436","437"],"import React, { useState, useEffect, useRef, Fragment } from 'react'\nimport { useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport AudioPlayer from 'react-h5-audio-player';\n// GraphQL \nimport { useQuery } from \"@apollo/client\";\nimport { CURRENT_PROJECT } from \"../../graphql/queries\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentState {\n  playbar: {\n    status: boolean,\n    data :  {\n      id: string,\n      projectId: string,\n      trackName: string\n    }\n  }\n}\n\nconst mapState = (state: ComponentState) => ({\n  status: state.playbar.status,\n  data: state.playbar.data\n})\n\nconst connector = connect(mapState)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux\n\n\nconst Playbar = ({status, data} : Props) => {\n  const [buffer, setBuffer] = useState(\"\");\n  const [trackDuration, setTrackDuration] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [currentProjectId, setProjectId] = useState(\"\")\n  const { data: projectData , loading} = useQuery(CURRENT_PROJECT, {\n    variables : {\n      projectId : data.projectId\n    }\n  });\n  const player = useRef(null);\n  const location = useLocation()\n  const path = location.pathname;\n  const params = path.split(\"/\");\n  \n  useEffect(() => {\n    if(params[1] === \"workspace\"){\n      setProjectId(params[2])\n    }\n    if(data.projectId) {\n      setProjectId(data.projectId)\n\n      axios.get(`http://localhost:4000/get/${data.projectId}/${data.id}`)\n      .then((res) => {\n        // Make binary buffer from the response data\n        const file = Buffer.from(res.data.Body, 'binary')\n        // Convert buffer into base64 \n        const base64 = file.toString('base64');\n        // Store base 64 in comonent state\n        setBuffer(base64);\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .then(() => {\n        // always executed\n      });  \n    }\n  },[data, buffer, params])\n\n  const playAudio = () => {\n    const audio = player.current as any;\n    setTrackDuration(audio.audio.current.duration)\n    // If player is paused then button calls play function else pause\n    if(audio.audio.current.paused) {\n      audio.audio.current.play();\n    } else  {\n      audio.audio.current.pause();\n    }\n  }\n  return (\n    <div className=\"playbar-container\" style={status === true ? { height: \"90px\" } : { height: \"0\" } }>  \n      <div className=\"playbar-wrapper\">\n      <div className=\"project-details\">\n          {\n            !loading && projectData && projectData.currentProject && \n            <Fragment>\n              <p className=\"track-name\">{data && data.trackName ? data.trackName : projectData.currentProject.name}</p> \n              <p className=\"project-name\">{projectData.currentProject.name}</p>\n            </Fragment>\n          }\n      </div>\n      <div className=\"controls-wrapper\">\n          <div className=\"playbar-controls\">\n          <button id=\"playbar-play\" onClick={() => playAudio()} disabled={buffer === \"\"}>\n            { isPlaying ?  \n            <img src=\"/assets/icons/playbar/pause.svg\" id=\"pause\" alt=\"Pause\"/> :  \n            <img src=\"/assets/icons/playbar/play.svg\" alt=\"Play\"/>\n            }           \n            </button>\n          </div>\n\n          <div className=\"playbar-scrub\">\n          <AudioPlayer\n            autoPlay\n            autoPlayAfterSrcChange={false}\n            src={`data:audio/wav;base64, ${buffer}`}\n            onPlay={() => setIsPlaying(true)}\n            ref={player}\n            defaultCurrentTime=\"0:00\"\n            defaultDuration=\"0:00\"\n          />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default connector(Playbar);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/functions/CreatePost.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/playbar/reducers.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/header/AccountOptions.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/sharedProject/UserSharedProject.tsx",["438"],"import React, { useState } from 'react'\nimport { Link } from \"react-router-dom\"\n// Components \nimport Comment from \"../comments/Comment\";\nimport FormatTimestamp from \"../../formatTime/FormatTimestamp\"\nimport ContributorAvatar from \"../../project/contributors/ContributorAvatar\";\nimport LikePost from \"../like/LikePost\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\ninterface ComponentProps  {\n  application : {\n    options: string\n  }\n}\nconst mapState = (state: ComponentProps) => ({\n  options: state.application.options,\n})\n\nconst mapDispatch = {\n  activatePlaybar : (payload: boolean) => ({ type: \"OPEN_PLAYBAR\", payload: payload }),\n  assignTrack : (payload: object) => ({type: \"ASSIGN_TRACK\", payload: payload}),\n  toggleOptions: (postId: string) => ({type: \"PROJECT_OPTIONS\", payload: postId}),\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {\n  post : { \n    post: {\n      id: number\n      creatorId : string\n      avatar: string\n      created: number\n      content: string\n      creatorName: string\n    }\n    project: {\n      id: string\n      mainTrack: string\n    }\n    comments: [{\n      id: number\n      postId:  number\n      userId:  number\n      userName: string\n      comment: string\n      created : number\n      avatar : string\n    }]\n    likes : [{\n      id : number\n      postId: number\n      userId: string\n    }]\n  }\n}\n\n\nconst UserSharedProject = ({ post, options, activatePlaybar, assignTrack, toggleOptions }: Props ) => {\n  const [ postIdForComment, setIdForComments ] = useState(0)\n  const openPlaybarAndAssignTrackId = (trackId: string, projectId: string) => {\n    activatePlaybar(true);\n    const dataObject = {\n      id: trackId,\n      projectId,\n      trackName: \"\"\n    }\n    assignTrack(dataObject)\n  }\n  const toggleOptionsMenu = (id: number) => {\n    if(options === \"\") {\n      toggleOptions(\"dssd\")\n    } else {\n      toggleOptions(\"\")\n    }\n  }\n  const openComments = (postId: number) => {\n    if(postIdForComment === postId) {\n     setIdForComments(0)\n    } else {\n     setIdForComments(postId)\n    }\n  }\n\n  return (\n      <div className=\"post\">\n        <div className=\"post-top-wrapper\">\n          <div className=\"avatar\">\n            <img src={post.post.avatar} alt=\"User's Avatar\"/>\n          </div>\n          <span className=\"post-name-wrapper\">\n            <Link to={`/profile/${post.post.creatorId}`} className=\"post-name post-user\">{post.post.creatorName} <span className=\"shared-project-span\">Shared project</span></Link>\n            <FormatTimestamp timestamp={post.post.created} />\n          </span> \n          <span className=\"post-btn-wrapper\">\n              <LikePost id={post.post.id}/>\n          </span>\n        </div>\n        <div className=\"post-project-wrapper\">\n          <button onClick={() => openPlaybarAndAssignTrackId(post.project.mainTrack, post.project.id)}>\n            <img src=\"/assets/icons/post/play.svg\" alt=\"Play button\"/>\n          </button>\n          <Link to={`/workspace/${post.project.id}`} className=\"project-name\">{post.post.content}</Link>\n        </div>\n        <div className=\"contributors\">\n          <span className=\"flex-wrapper\">\n            <p>Contributors</p>\n            <span className=\"contributors-avatars\">\n              <ContributorAvatar projectId={post.project.id} />\n            </span>\n          </span>   \n        </div>\n        <div className=\"post-bottom-wrapper\">\n          <button onClick={() => openComments(post.post.id)} className=\"comment-button\">Comments</button>\n          <p className=\"comments-length\">{post.comments.length}</p>\n          <div className=\"likes\"> \n            <img src=\"/assets/icons/post/thumb.svg\" alt=\"Likes\"/>\n              <p>{post.likes.length}</p>\n          </div>\n        </div>\n        {postIdForComment === post.post.id ? <Comment postId={post.post.id} /> : null}\n      </div> \n  )\n}\n\nexport default connector(UserSharedProject);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/create/CreateComponent.tsx",["439","440","441","442","443","444"],"import React, { useEffect , useState} from 'react'\nimport { Link, useLocation } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\";\nimport { MY_ACCOUNT } from \"../../graphql/queries\";\n// Redux \nimport { connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {\n application : {\n   postPanel : boolean,\n   projectPanel: boolean\n }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  postPanel : state.application.postPanel,\n  projectPanel: state.application.projectPanel\n})\n\nconst mapDispatch = {\n  closePostPanel : (payload: boolean) => ({ type: \"CLOSE_POST_PANEL\", payload: payload }),\n  intialiseProject: (bool: boolean ) => ({type: \"INIT_PROJECT\", payload: bool }),\n}\n\nconst connector = connect(mapState, mapDispatch)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\ntype Props = PropsFromRedux;\nconst CreateComponent = ({projectPanel, postPanel ,closePostPanel , intialiseProject} : Props) => {\n  \n  const togglePostPanel = () => {\n    if(postPanel === true) {\n      closePostPanel(false)\n    } else {\n      closePostPanel(true)\n    }\n  }\n\n  const toggleProjectPanel = () => {\n    if(projectPanel === true) {\n      intialiseProject(false)\n    } else {\n      intialiseProject(true)\n    }\n  }\n\n\n  return (\n    <div className=\"create-component\">\n      <button onClick={() => toggleProjectPanel()} className=\"create-project\"> \n        <img src=\"/assets/icons/create/project-create.svg\" alt=\"Create Project\" />\n        <p>Create Project</p>\n      </button>\n\n      <button onClick={() => togglePostPanel()}  className=\"create-post\"> \n        <img src=\"/assets/icons/create/post-colour.svg\" alt=\"Create Post\" />\n        <p>Create Post</p>\n      </button>\n    </div>\n  )\n}\nexport default connector(CreateComponent);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/mates/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/application/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tracks/TracksViewOnly.tsx",["445","446","447","448","449","450","451","452","453","454","455","456","457","458"],"import React, {useState, useEffect} from 'react'\n// GraphQL\nimport { useMutation } from \"@apollo/client\";\n// import {  } from \"../../../graphql/mutations\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\nvar ab2str = require('arraybuffer-to-string')\nvar str2ab = require('string-to-arraybuffer')\n\nconst MicRecorder = require('mic-recorder-to-mp3');\n\ninterface ComponentProps {\n  playbar: {\n    data : object\n  }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  data: state.playbar.data\n})\n\nconst mapDispatch = {\n  assignTrack: (data: any) => ({type: \"ASSIGN_TRACK\", payload: data })\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\nvar counter: number;\n// import RecorderComponent from \"../RecorderComponent\";\nconst TracksViewOnly  = ({assignTrack} : Props) => {\n  const [trackForm, setTrackForm] = useState({\n    name: \"\"\n  })\n  const [initForm, setForm] = useState(false);\n  const [audioBuffer, storeBuffer] = useState([]);\n  const [tracks, setTracks] = useState([{\n    name: \"\",\n    url : \"\",\n    created: \"\",\n  }])\n  // const [src, setSrc] = useState(\"\");\n  const [isActive, setIsActive] = useState(false);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    let interval: any = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        if(seconds === 60) {\n          setMinutes(minutes => minutes + 1);\n          setSeconds(0);\n        }else {\n          setSeconds(seconds => seconds + 1);\n        }\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive,seconds])\n\n\nconst sendAudioData = (data: any) => {\n  console.log(data);\n  assignTrack(data);\n}\n\n  return (\n    <div className=\"track-list-container\">\n    <div className=\"track-list-header\">\n      <p>Track Name</p>\n      <p>Track Length</p>\n      <p>Options</p>\n    </div>\n    <div className=\"track-list-scroll\">\n      <div className=\"track-container\">\n        <div className=\"track-details\">\n          <p className=\"track-name\">Track One</p>\n          <p className=\"track-date\">Feb 1, 2019 at 4:23 PM</p>\n        </div>\n      </div>\n      { tracks && tracks.length > 1 ? tracks.map((track) => \n      { return track.url !== \"\" &&  (\n      <li key={track.url}className=\"track-container\">\n      <button className=\"play-audio\" onClick={() => sendAudioData(track)}>  </button>\n        <div className=\"track-details\">\n          <p className=\"track-name\">{track.name}</p>\n          <p className=\"track-date\">{track.created}</p>\n        </div>\n    </li> )\n    }\n      )  : null }\n    </div> \n  </div>\n  )\n}\n\nexport default connector(TracksViewOnly);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tabs/TabsViewOnly.tsx",["459","460"],"import React,  { useState, useEffect } from 'react'\nimport { v4 as uuid } from \"uuid\";\n\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport { GET_TABS } from \"../../../graphql/queries\";\n// Redux\nimport {connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {\n  project: {\n    currentProject: string\n  }\n}\n\nconst mapState = (state : ComponentProps) => ({\n  currentProject: state.project.currentProject,\n})\n\nconst connector = connect(mapState);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\n\nconst TabsViewOnly = ({currentProject}: Props) => {\n  const { data, loading } = useQuery(GET_TABS, {\n    variables: {\n      projectId: currentProject\n    }\n  });\n\n  return (\n    <div className=\"tabs-container\">\n      <div className=\"lyric-tab-header\">\n          <h5>Tabs</h5>\n        </div>\n        <div className=\"lyric-tab-scroll-container\">\n          { !loading && data && data.tabs && data.tabs.length !== 0 ? data.tabs.map((tab :any) => \n             <li key={tab.id} className=\"tab-container\">\n             <div className=\"lyric-tab-top\">\n               <p>{tab.description}</p>\n             </div>\n             <div className=\"tab-grid\">\n               <div className=\"grid-lines\">\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n               </div>\n                {  tab.tab.map((item: any) => \n                 <span key={uuid()}>\n                    <p>{ item === -1 ? \"\" : item}</p>\n                 </span> \n                )}\n             </div>\n         </li> ) : \n         <li className=\"default-workspace\">\n           <p>There are no tabs</p>\n          </li>\n         }\n    </div>\n    </div>\n  )\n}\n\nexport default connector(TabsViewOnly);\n","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/lyrics/Lyrics.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/functions/DeletePost.tsx",["461","462","463"],"import React, { Fragment, useEffect } from 'react'\nimport { Link } from \"react-router-dom\"\n// GraphQL\nimport { useMutation } from \"@apollo/client\";\nimport { MY_POSTS, FEED_POSTS, ALL_POSTS } from \"../../../graphql/queries\";\nimport { DELETE_POST } from \"../../../graphql/mutations\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {\n\n}\n\nconst mapState = (state: ComponentProps) => ({\n\n})\n\nconst mapDispatch = {\n  setPostId : (id:number) => ({type: \"SELECTED_POST_ID\", payload: id}),\n  validatePostDelete: (payload:boolean) => ({type: \"SET_DELETE_COMPONENT\", payload: payload}),\n  togglePostOptions: (payload: boolean) => ({type: \"TOGGLE_POST_OPTIONS\", payload}),\n}\n\nconst connector = connect(mapState, mapDispatch);\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {\n  postId: number\n};\n\nconst DeletePost = ({postId, validatePostDelete, setPostId, togglePostOptions} : Props) => {\n  const [deletePost] = useMutation(DELETE_POST);\n  const deletPostById = () => {\n    const id = postId; \n    // Remove post and update all caches\n    deletePost({\n        variables: { postId: id }, \n        update: (cache, { data: { deletePost }}) => {\n            // Cache for my posts : Update cache to show on profile in realtime\n          const cacheMyData: any = cache.readQuery({ query: MY_POSTS });\n          // Check to see if there is a cache\n          if(cacheMyData !== null) {\n            let updatedMyCache = [...cacheMyData.myPosts];\n            let index;\n            for(let x = 0; x < updatedMyCache.length; x++ ) {\n              if(updatedMyCache[x].postId === postId ) {\n               index =  updatedMyCache.indexOf(updatedMyCache[x]);\n               updatedMyCache.splice(index, 1);\n              }\n          }\n          cache.writeQuery({ \n            query: MY_POSTS, \n            data: {\n              myPosts: updatedMyCache\n            }\n          });\n        }  \n          // Cache for feed posts : Update cache to show on profile in realtime\n          const cacheFeedPosts: any = cache.readQuery({ query: FEED_POSTS });\n          // Check to see if there is a cache\n          if(cacheFeedPosts !== null) {\n            let updatedFeedCache = [...cacheFeedPosts.myFeed];\n            let index;\n            for(let x = 0; x < updatedFeedCache.length; x++ ) {\n              if(updatedFeedCache[x].postId === postId ) {\n               index =  updatedFeedCache.indexOf(updatedFeedCache[x]);\n               updatedFeedCache.splice(index, 1);\n              }\n          }\n          cache.writeQuery({ \n            query: FEED_POSTS, \n            data: {\n              myFeed: updatedFeedCache\n            }\n          });\n        }  \n          // Cache for all posts : Update cache to show on feed in realtime\n          const cacheAllData: any = cache.readQuery({ query: ALL_POSTS });\n           // Check to see if there is a cache\n           if(cacheAllData !== null) {\n            let updatedAllCache = [...cacheAllData.allPosts];\n            let index\n            // Loop through the cache and find the post we want to delete by matching the postId\n            for(let x = 0; x < updatedAllCache.length; x++ ) {\n                if(updatedAllCache[x].postId === postId ) {\n                 index =  updatedAllCache.indexOf(updatedAllCache[x]);\n                 updatedAllCache.splice(index, 1);\n                }\n            }\n          cache.writeQuery({ \n            query: ALL_POSTS,\n            data : {\n              allPosts : updatedAllCache\n            } \n          });\n          }\n        }\n      }).then(() => {\n        setPostId(0);\n        validatePostDelete(false);\n        togglePostOptions(false)\n      })\n      .catch(err => console.log(err) )\n    }\n  return (\n    <div className=\"result-component\">\n      <div className=\"wrapper\">\n            <p>Are you sure you want to delete this post?</p> \n            <span className=\"btn-wrapper\">\n              <button onClick={() => deletPostById()} className=\"delete-btn\">\n                <span className=\"btn-bg\"></span>\n                <p>Delete</p>\n              </button>\n              <button onClick={() =>    validatePostDelete(false)} >\n                <p>Cancel</p>\n              </button>\n            </span>\n      </div>\n    </div>\n  )\n}\nexport default connector(DeletePost)","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/contributors/ContributorAvatar.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/lyrics/CreatLyrics.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/options/Options.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/functions/DeleteComment.tsx",["464","465","466"],"import React, { Fragment, useEffect } from 'react'\nimport { Link } from \"react-router-dom\"\n// GraphQL\nimport { useMutation } from \"@apollo/client\";\nimport { GET_COMMENTS } from \"../../../graphql/queries\";\nimport { DELETE_COMMENT } from \"../../../graphql/mutations\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {\n\n}\n\nconst mapState = (state: ComponentProps) => ({\n\n})\n\nconst mapDispatch = {\n  toggleRemoveComment: (payload: boolean) => ({type: \"TOGGLE_REMOVE_COMMENT\", payload})\n}\n\nconst connector = connect(mapState, mapDispatch);\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {\n  postId: number\n  commentId: number\n};\n\nconst DeleteComment = ({commentId, postId, toggleRemoveComment} : Props) => {\n  const [deleteComment] = useMutation(DELETE_COMMENT);\n  const deleteCommentById = async () => {\n    // Remove Comment and update cache\n    await deleteComment({\n      variables: {\n        commentId: commentId,\n        postId\n      }, \n      update: (cache, { data : {deleteComment} }) => {\n       cache.writeQuery({ \n         query: GET_COMMENTS, \n         variables : {\n             postId\n           },\n         data : {\n           getComments : deleteComment\n         }\n       });\n      }\n    })\n    try {\n      toggleRemoveComment(false);\n    } catch(err){\n      console.log(err);\n    }\n    }\n  return (\n    <div className=\"result-component\">\n      <div className=\"wrapper\">\n            <p>Are you sure you want to delete this comment?</p> \n            <span className=\"btn-wrapper\">\n              <button onClick={() => deleteCommentById()} className=\"delete-btn\">\n                <span className=\"btn-bg\"></span>\n                <p>Delete</p>\n              </button>\n              <button onClick={() =>    toggleRemoveComment(false)} >\n                <p>Cancel</p>\n              </button>\n            </span>\n      </div>\n    </div>\n  )\n}\nexport default connector(DeleteComment)","/Users/jay/Desktop/Current Projects/Foliotune/web/src/App.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/index.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/searchResult/SearchResult.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/myMates/MyMates.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/scrollToTop/ScrollToTop.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/workspace/reducers.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/project/reducers.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/projects/Projects.tsx",[],["467","468"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/lyrics/LyricsViewOnly.tsx",["469"],"import React, { useState } from 'react'\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport { GET_LYRICS } from \"../../../graphql/queries\";\n// Redux\nimport { connect , ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {\n  project: {\n    currentProject: string\n  }\n}\n\nconst mapState = (state : ComponentProps) => ({\n  currentProject: state.project.currentProject\n})\n\nconst connector = connect(mapState);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\nconst LyricsViewOnly = ({ currentProject}: Props)  => {\n  const { data, loading } = useQuery(GET_LYRICS , {\n    variables: {\n      projectId: currentProject\n    }\n  });\n\n  return (\n    <div className=\"lyrics-container\">\n    <div className=\"lyric-tab-header\">\n      <h5>Lyrics</h5>\n    </div>\n    <div className=\"lyric-tab-scroll-container\">\n      { !loading && data && data.lyrics && data.lyrics.length !== 0 ? data.lyrics.map((lyric:any)=> \n        <div className=\"lyric-tab-container\" key={lyric.id}> \n          <div className=\"lyric-tab-top\">\n            <p>{lyric.option}</p>\n          </div>\n          <div className=\"lyric-content\">\n            <p>{lyric.lyric}</p>\n          </div>\n       </div>\n      )\n       : <li className=\"default-workspace\">\n       <p>There are no lyrics.</p>\n      </li>\n    }\n      </div>\n  </div>\n  )\n}\n\nexport default connector(LyricsViewOnly);\n","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/lists/Mates.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/components/Information.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/searchResult/lists/Users.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/lists/MyProjects.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/edit/NameDob.tsx",["470"],"import React, { useState } from \"react\"\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { MY_ACCOUNT } from \"../../../graphql/queries\";\nimport {UPDATE_NAMES_AND_DOB } from \"../../../graphql/mutations\";\n\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {  \n  }\n  \n  const mapState = (state: ComponentProps) => ({})\n  \n  const mapDispatch = {\n    editNames: (payload: boolean) => ({type: \"EDIT_NAME\", payload: payload}),\n  }\n  \n  const connector = connect(mapState,mapDispatch);\n  \n  type PropsFromRedux = ConnectedProps<typeof connector>;\n  type Props = PropsFromRedux\n\nconst NamesDob = ({editNames}: Props) => {\n  const [formErrors , setErrors] = useState({ firstName: \"\", lastName: \"\", dob:\"\"})\n  const [dobErrors, setDobErrors] = useState({\n    day: \"\",\n    month: \"\",\n    year: \"\",\n    all: \"\"\n})\n  const { data } = useQuery(MY_ACCOUNT);\n  const [UpdateNamesAndDob] = useMutation(UPDATE_NAMES_AND_DOB);    \n\n  \n const dobArray = data.me.dob.split(\" \");\n  var day = dobArray[0];\n  var month = dobArray[1];\n  var year = dobArray[2];\n\n\n  const [formData, setFormData] = useState({\n    firstName: data.me.firstName,\n    lastName :  data.me.lastName,\n    day : day,\n    month: month,\n    year: year\n  });\n\n\n  const onChange = (e:any) => {\n    setFormData({...formData, [e.target.name] : e.target.value})\n  }\n\n  const onSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    var errors = {\n      firstName: \"\",\n      lastName: \"\",\n      dob: \"\"\n    }\n\n    if(formData.firstName === \"\") {\n      errors.firstName = \"First name can't be left empty\"\n    }\n    if(formData.lastName === \"\") {\n      errors.lastName = \"Last name can't be left empty\"\n    }\n    if(formData.day === \"\" || formData.month === \"\" || formData.year === \"\") {\n      errors.dob = \"Date of birth can't be left empty\"\n    }\n\n    if(errors.firstName === \"\" && errors.lastName === \"\" &&  errors.dob === \"\") {\n      const dob = formData.day + \" \" + formData.month + \" \" + formData.year;\n  \n      UpdateNamesAndDob({\n        variables : {\n          id: data.me.id,\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          dob\n        }\n      })\n      editNames(false);\n    } else { \n      setErrors(errors);\n    }\n  }\n\n  return (\n    <form onSubmit={(e) => onSubmit(e)} className=\"edit-form\">\n    <div className=\"name-email-wrapper\">\n        <span>\n            <label htmlFor=\"firstName\" className=\"label\">First Name</label>\n            <input \n              type=\"text\" \n              name=\"firstName\"\n              value={formData.firstName}\n              onChange={(e) => onChange(e)} />\n              { formErrors.firstName && <p className=\"input-error\">{formErrors.firstName}</p> }\n        </span>\n        <span>\n          <label htmlFor=\"lastName\"className=\"label\">Last Name</label>\n          <input \n              type=\"text\" \n              name=\"lastName\"\n              value={formData.lastName}\n              onChange={(e) => onChange(e)} />\n              { formErrors.lastName && <p className=\"input-error\">{formErrors.lastName}</p> }\n        </span>\n        <span className=\"email-container\">\n            <p className=\"label\">Email</p>\n            <p className=\"profile-info\">{data.me.email}</p> \n        </span>\n    </div>\n    <span>\n                        <span className=\"dob-wrapper\">\n                            <span className=\"dob-inputs day-wrapper\">\n                                <label htmlFor=\"day\">Day</label>\n                                <input \n                                    type=\"text\"\n                                    name=\"day\" \n                                    value={formData.day} \n                                    className=\"dob-input\"\n                                    id=\"day\"\n                                    placeholder=\"DD\"\n                                    maxLength={2}\n                                    style={  formErrors.dob ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)}/>\n                            </span>\n                            <span className=\"dob-inputs month-wrapper\">\n                                <label htmlFor=\"month-edit\">Month</label>\n                                <select \n                                    name=\"month\" \n                                    id=\"month-edit\" \n                                    required\n                                    aria-invalid=\"true\"\n                                    style={  formErrors.dob || dobErrors.month !== \"\" ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)} defaultValue={formData.month}>\n                                    <option selected disabled value=\"month\"> Month</option>\n                                  \n                                    <option value=\"January\">January</option>\n                                    <option value=\"February\">February</option>\n                                    <option value=\"March\">March</option>\n                                    <option value=\"April\">April</option>\n                                    <option value=\"May\">May</option>\n                                    <option value=\"June\">June</option>\n                                    <option value=\"July\">July</option>\n                                    <option value=\"August\">August</option>\n                                    <option value=\"September\">September</option>\n                                    <option value=\"October\">October</option>\n                                    <option value=\"November\">November</option>\n                                    <option value=\"December\">December</option>\n                                </select>\n                            </span>\n                                <span className=\"dob-inputs year-wrapper\">\n                                <label htmlFor=\"year\">Year</label>\n                                <input \n                                    type=\"text\" \n                                    name=\"year\" \n                                    value={formData.year} \n                                    className=\"dob-input\"\n                                    id=\"year\"\n                                    placeholder=\"YYYY\"\n                                    maxLength={4}\n                                    style={formErrors.dob ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)}/>\n                            </span>\n                        </span>\n                        { formErrors.dob && <p className=\"input-error\">{formErrors.dob}</p> }\n                    </span>\n        <input type=\"submit\" value=\"Submit\"/>\n    <button type=\"button\" className=\"edit-profile\" onClick={() => editNames(false)}>\n            <img src=\"/assets/icons/plus/cross-red.svg\" alt=\"close\"/>\n    </button>\n    </form>   \n  )\n}\n\nexport default connector(NamesDob);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/workspace/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/comments/Comment.tsx",["471"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n// GraphQL\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { COMMENT_ON_POST, DELETE_COMMENT } from \"../../../graphql/mutations\";\nimport { GET_COMMENTS, MY_ACCOUNT, USER_BY_POST_ID } from \"../../../graphql/queries\";\n// Components \nimport Options from \"../options/Options\";\nimport DeleteComment from \"../functions/DeleteComment\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\ninterface ComponentProps  {\n  posts : {\n    options: boolean\n    postDelete: boolean\n    commentDelete: boolean\n  }\n}\nconst mapState = (state: ComponentProps) => ({\n  options: state.posts.options,\n  postDelete: state.posts.postDelete,\n  commentDelete: state.posts.commentDelete\n})\n\nconst mapDispatch = {\n  activatePlaybar : (payload: boolean) => ({ type: \"OPEN_PLAYBAR\", payload: payload }),\n  assignTrack : (payload: object) => ({type: \"ASSIGN_TRACK\", payload: payload}),\n  togglePostOptions: (payload: boolean) => ({type: \"TOGGLE_POST_OPTIONS\", payload}),\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {\n  postId: number\n}\nconst Comment = ({postId, options, commentDelete, togglePostOptions}: Props) => {\n  const [ formComment, setFormComment] = useState(\"\")\n  const [ disableButton, setDisabled] = useState(true)\n  const [selectId, setSelectedId] = useState(0);\n  const [comment] = useMutation(COMMENT_ON_POST);\n  const [deleteComment] = useMutation(DELETE_COMMENT);\n  const { data: userData, loading : userLoading } = useQuery(USER_BY_POST_ID,{\n    variables: {\n      postId: postId\n    }\n  });\n  const { data: meData, loading : meLoading } = useQuery( MY_ACCOUNT);\n  const { data, loading } = useQuery(GET_COMMENTS, {\n    variables: {\n      postId: postId\n    }\n  });\n\n  useEffect(() => {\n    if(formComment === \"\"){\n      setDisabled(true);\n    } else {\n      setDisabled(false);\n    }\n  },[formComment, ])\n  const onChange = (e:React.ChangeEvent<HTMLTextAreaElement>) => {\n    setFormComment(e.target.value);\n  } \n  const onSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n     comment({\n      variables: {\n        comment: formComment,\n        postId\n      },\n      update: (cache, { data: { comment } }) => {\n        // Update cache with the response comment data which\n        // should be all comments for the selected post\n         cache.writeQuery({ \n          query: GET_COMMENTS, \n          variables : {\n              postId: postId\n            },\n          data : {\n            getComments : comment\n          }\n        });\n      }\n    }).then((res) => setFormComment(\"\"))\n    .catch(err => console.log(err))\n  }\n  const formatTimestamp = (timestamp: any) => {\n    const splitDateAndTime = timestamp.split(\"T\")\n    const date = splitDateAndTime[0].split(\"-\");\n    const time =  splitDateAndTime[1].split(\":\");\n    const hourAndMin = time[0] + \":\" + time[1];\n    var month;\n    switch(date[1]){\n      case \"01\" : month = \"January\"; break;\n      case \"02\" : month = \"Febraury\"; break;\n      case \"03\" : month = \"March\"; break;\n      case \"04\" : month = \"April\"; break;\n      case \"05\" : month = \"May\"; break;\n      case \"06\" : month = \"June\"; break;\n      case \"07\" : month = \"July\"; break;\n      case \"08\" : month = \"August\"; break;\n      case \"09\" : month = \"September\"; break;\n      case \"10\" : month = \"October\"; break;\n      case \"11\" : month = \"November\"; break;\n      case \"12\" : month = \"December\"; break;  \n    };\n    const year = date[0].split(\"\")\n    const yearAbbr = year[2] + year[3];\n    const fullDate = date[2] +  \" \" + month + \" \" + yearAbbr;\n    const displayTimestamp = fullDate + \" at \" + hourAndMin;\n     return displayTimestamp;\n }\n\n const deleteCommentById = (id: number) => {\n   deleteComment({\n     variables: {\n       commentId: id,\n       postId\n     }, \n     update: (cache, { data : {deleteComment} }) => {\n      cache.writeQuery({ \n        query: GET_COMMENTS, \n        variables : {\n            postId: postId\n          },\n        data : {\n          getComments : deleteComment\n        }\n      });\n     }\n   })\n }\n\n const toggleOptionsMenu = (id: number) => {\n  if(options === true) {\n    setSelectedId(0);\n    togglePostOptions(false)\n  } else {\n    setSelectedId(id);\n    togglePostOptions(true)\n  }\n}\n  return (\n    <div  className=\"comments-container\">\n      <form className=\"comment-form\" onSubmit={(e) => onSubmit(e)}>\n        <span className=\"input-wrapper\">\n          <label htmlFor=\"comment\">Why not make a comment?</label>\n          <span className=\"input-span\">\n          <textarea value={formComment} placeholder=\"Write your comment here ...\" onChange={(e) => onChange(e)} style={formComment === \"\" ? { minHeight: \"40px\" } : { minHeight: \"150px\" } } />\n          <input type=\"submit\" value=\"Send\" disabled={disableButton === true}/>\n          </span>\n        </span>  \n      </form>  \n      <div>\n        <ul>\n        {!loading && data && data.getComments && data.getComments.map((comment: any) => \n           <li key={comment.id} className=\"comment\">\n             <div className=\"comment-top\">\n              <div className=\"avatar\">\n                <img src={comment.avatar} alt=\"Avatar\"/>\n              </div>\n              <div className=\"name-date-wrap\">\n              { !meLoading && meData && meData.me && meData.me.id === comment.userId ? \n                <Link to={`/profile/${comment.userId}`} className=\"name\">You</Link> \n                :   <Link to={`/profile/${comment.userId}`} className=\"name\">{comment.userName}</Link> \n                }\n                <p className=\"date\">{formatTimestamp(comment.created)}</p>\n              </div>\n        \n              { !meLoading && !userLoading && userData && userData.userByPostId &&  userData.userByPostId.id === meData.me.id ? \n              // <button className=\"delete-comment\" onClick={() => deleteCommentById(comment.id)}>\n              //     <img src=\"/assets/icons/workspace/delete.svg\" alt=\"Delete post\"/>\n              // </button> \n              <span className=\"post-btn-wrapper\">\n                <button className=\"post-buttons\" onClick={() => toggleOptionsMenu(comment.id)}>\n                  <img src=\"/assets/icons/post/options.svg\" alt=\"Project options\"/>\n                </button>\n                </span>\n              : \n              !meLoading && meData && meData.me &&  meData.me.id === comment.userId && \n              // <button className=\"delete-comment\" onClick={() => deleteCommentById(comment.id)}>\n              //     <img src=\"/assets/icons/workspace/delete.svg\" alt=\"Delete post\"/>\n              // </button>\n              <span className=\"post-btn-wrapper\">\n              <button className=\"post-buttons\" onClick={() => toggleOptionsMenu(comment.id)}>\n                <img src=\"/assets/icons/post/options.svg\" alt=\"Project options\"/>\n              </button>\n              </span>}\n             </div>\n            <p className=\"comment-context\">{comment.comment}</p>\n            { selectId === comment.id && options === true && \n                      <Options type=\"comment\" />}\n            { commentDelete === true && selectId === comment.id && <DeleteComment postId={postId} commentId={comment.id}/>}\n           </li>\n        ) }\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default connector(Comment);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/functions/Validation.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/feed/Feed.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/Profile.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/functions/CreateProject.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/lists/SearchMates.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/sharedProject/MySharedProject.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/posts/MyPost.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/edit/Instruments.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/playbar/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/project/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/components/SearchProjects.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/options/Options.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/index.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/Routes.tsx",["472","473","474"],"import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route , Redirect, useLocation} from \"react-router-dom\";\n\n// GraphQL \nimport { useQuery } from \"@apollo/client\";\nimport { MY_ACCOUNT } from \"./graphql/queries\";\n\n// Redux \nimport { connect, ConnectedProps } from \"react-redux\";\n\nimport Login from './routes/login-register/Login';\nimport Register from './routes/login-register/Register';\n\n// Components \nimport Header from \"./components/header/Header\";\nimport Playbar from \"./components/playbar/Playbar\";\nimport Navigation from \"./components/navigation/Navigation\";\nimport CreatePost from './components/post/functions/CreatePost';\nimport CreateProject from './components/project/functions/CreateProject';\nimport AuthRoute from \"./components/authRoute/AuthRoute\";\nimport UnAuthRedirect from \"./components/unAuthRedirect/UnAuthRedirect\"\nimport UserProfile from \"./components/profile/user/UserProfile\"\nimport ScrollToTop from \"./components/scrollToTop/ScrollToTop\"\nimport RequestResult from \"./components/request/RequestResult\";\n// Routes\nimport Feed from './routes/feed/Feed';\nimport Workspace from './routes/workspace/Workspace';\nimport MyMates from './routes/myMates/MyMates';\nimport Profile from './routes/profile/Profile';\nimport Projects from './routes/projects/Projects';\nimport NotFound from './routes/notFound/NotFound';\nimport Landing from \"./routes/landing/Landing\";\nimport Discover from \"./routes/discover/Discover\";\nimport SearchResult from \"./routes/searchResult/SearchResult\";\n\ninterface ComponentProps {\n  application : {\n      location: string\n      postPanel : boolean\n      projectPanel : boolean\n      result: {\n        show: boolean\n        success: boolean\n        type: string\n      }\n  }  \n  user: {\n    authenticated : boolean,\n    user : {}\n  }\n  // project: {\n  //   projectPanel : boolean,\n  //   projectDetails : {}\n  // }\n}\n\nconst mapState = (state : ComponentProps) => ({\n  authenticated : state.user.authenticated,\n  location: state.application.location,\n  projectPanel: state.application.projectPanel,\n  postPanel : state.application.postPanel,\n  result: state.application.result\n})\n\nconst mapDispatch = {\n  activatePlaybar : (val:Boolean) => ({type: \"OPEN_PLAYBAR\", payload: val}),\n  authenticateUser: (user: object) => ({ type: \"USER_AUTHENTICATED\", payload: user}),\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\n\n// Component \nconst Routes = ({location, projectPanel, authenticated, result, postPanel, activatePlaybar, authenticateUser} : Props) => {\n  const { data , loading } = useQuery(MY_ACCOUNT);\n\n  useEffect(() => {\n    if(!loading && data && data.me) {\n      const contructedUserData = {\n        id : data.me.id,\n        email: data.me.email,\n    }\n    authenticateUser(contructedUserData);\n    }\n    if(!loading && location !== \"workspace\") {\n      activatePlaybar(false);\n    } else if(!loading && location === \"workspace\") {\n      activatePlaybar(true);\n    }\n  }, [location, data, loading, activatePlaybar, authenticateUser])\n  \n    return (\n      <Router>\n\n         {authenticated === true ? \n         <div className=\"app\">\n         <Header />\n         <div className={location !== \"workspace\" ? \"app-wrapper\" : \"app-workspace-wrapper\"} > \n         {location === \"workspace\" ?  null : <Navigation></Navigation>}\n         {postPanel === true ? <CreatePost/> : null}\n         {projectPanel === true ? <CreateProject/> : null}\n         {result.show === true ? <RequestResult /> : null}\n         <ScrollToTop />\n           <Switch>\n             <Route exact path=\"/\">\n               <Redirect to=\"/feed\"></Redirect> \n            </Route> \n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/\" /> \n            <Route exact path=\"/feed\" component={Feed} />\n            <Route exact path=\"/discover\" component={Discover} />\n             <Route exact path=\"/workspace/:id\" component={Workspace} />\n             <Route exact path=\"/profile/me\" component={Profile} />\n             <Route exact path=\"/projects\" component={Projects} />\n             <Route exact path=\"/mates\" component={MyMates} />\n             <Route exact path=\"/search/:input\" component={SearchResult} />\n             <Route exact path=\"/profile/:id\" component={UserProfile} />\n             <Route component={NotFound} />\n           </Switch>\n         </div>\n         <Playbar></Playbar>\n       </div> \n       :\n        <div className=\"landing\">\n              <ScrollToTop />\n          <Switch>\n              <Route exact path=\"/\" component={Landing} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/register\" component={Register} />\n              {/* <Route component={NotFound} /> */}\n              {/* <Route exact path=\"/login\" component={UnAuthRedirect} />\n              <Route exact path=\"/register\" component={UnAuthRedirect} />\n              <Route exact path=\"/feed\" component={UnAuthRedirect} />\n              <Route exact path=\"/discover\" component={UnAuthRedirect} />\n              <Route path=\"/workspace/\" component={UnAuthRedirect} />\n              <Route path=\"/profile/\" component={UnAuthRedirect} />\n              <Route exact path=\"/projects\" component={UnAuthRedirect} />\n              <Route exact path=\"/mates\" component={UnAuthRedirect} /> */}\n          </Switch>\n        </div>\n         }\n      </Router>\n    )\n}\n\nexport default connector(Routes);\n","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/user/reducers.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/user/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/UserProfile.tsx",["475","476"],"import React, { useState, Fragment } from 'react'\nimport { withRouter, useLocation } from \"react-router-dom\";\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport { USER_BY_ID } from \"../../../graphql/queries\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n// Components \nimport Information from \"./components/Information\"\nimport Options from \"../../../components/mates/options/Options\";\nimport Validation from \"../../../components/mates/functions/Validation\";\nimport Posts from \"./posts/Posts\";\nimport Projects from \"./projects/Projects\";\nimport Mates from \"../../mates/lists/Mates\";\n\n\ninterface ComponentProps {  \n    mates: {\n        options : boolean\n        remove: boolean\n        add : boolean\n      }\n  }\n  \n  const mapState = (state: ComponentProps) => ({\n    options: state.mates.options,\n    remove: state.mates.remove,\n    add : state.mates.add\n  })\n  \n  const mapDispatch = {\n\n  }\n  \n  const connector = connect(mapState,mapDispatch);\n  \n  type PropsFromRedux = ConnectedProps<typeof connector>;\n  type Props = PropsFromRedux & {\n      history : any\n  }\n  \nconst ProfileByID = ({ add, options, remove } : Props) => {\n    const location: any = useLocation();\n    const params = location.pathname.split(\"/\")\n    const userId = parseInt(params[2]);\n    const { data, loading } = useQuery(USER_BY_ID, {\n        variables: {\n            userId: userId,\n        } \n    });\n    const [display , setDisplayOption] = useState(\"posts\");\n\n    if(loading) {\n        return <div>loading...</div>\n    }\n    const onChange = (e:React.ChangeEvent<HTMLSelectElement> ) => {\n        setDisplayOption(e.target.value);\n    }\n\n    return (\n    <div className=\"component-container\">\n        <div className=\"user-profile-wrapper\"> \n        {/* <div className=\"component-header\">\n        <h3 className=\"feed-title\">{data.user.firstName + \" \" + data.user.lastName}</h3>\n        { !meLoading && meData && meData.me.id === userId  ? null : myFriend === true ?\n            <button \n                onClick={() => removeMateFunc(data.user.id)} className=\"remove-mate\"\n                disabled={addBtnDisabled === true}>\n                <p>Remove mate</p>\n            </button> :\n             <button \n            onClick={() => addMate(data.user.id)} className=\"add-mate\"\n            disabled={addBtnDisabled === true}>\n                <p>Add Mate</p>\n                <img src=\"/assets/icons/profile/add.svg\" alt=\"Add Mate\"/>\n        </button>}\n\n        {clearMessage === false && addBtnDisabled === true &&\n            <span className=\"res-status\" style={ {backgroundColor: \"#f8323b\"} }>\n                <div></div> \n                <p>{responseStatus}</p>\n            </span>\n        }\n       { clearMessage === false && notificationSent === true &&\n          <span className=\"res-status\" style={ {backgroundColor: \"2767fa\", width: \"200px\"}}>\n          <div></div> \n          <p>{responseStatus}</p>\n      </span> }\n        </div> */}\n         {!loading && data && data.user &&\n         <Fragment>\n            <Information user={data.user}/>\n            <ul className=\"profile-components-options\">\n                <li>\n                    <button \n                    onClick={() => setDisplayOption(\"posts\")} \n                    className={ display === \"posts\" ? \"display-active\" : \"display-normal\"}>Posts</button>\n                </li>\n                <li>\n                    <button \n                    onClick={() => setDisplayOption(\"projects\")}\n                    className={ display === \"projects\" ? \"display-active\" : \"display-normal\"}>Projects</button>\n                </li>\n                <li>\n                    <button  \n                        className={ display === \"mates\" ? \"display-active\" : \"display-normal\"}\n                        onClick={() => setDisplayOption(\"mates\")}>Mates</button>\n                </li>\n                <select value={display} onChange={(e) => onChange(e)}>\n                    <option value=\"posts\">Posts</option>\n                    <option value=\"projects\">Projects</option>\n                    <option value=\"mates\">Mates</option>\n                </select>\n            </ul> \n            <ul className=\"profile-display\">\n            { display === \"posts\" && <Posts />}\n            { display === \"projects\" && <Projects />}\n            { display === \"mates\" && <Mates userId={data.user.id} />}\n            </ul>\n        </Fragment>\n        }\n        {/* { options === true && <Options type=\"profile\" mateId={userId}/>}\n        {remove === true  && <Validation type=\"remove\" mateId={userId} />}\n        {add === true &&  <Validation type=\"add\" mateId={userId} />} */}\n        </div>\n        </div>\n    );\n}\n\nexport default withRouter(connector(ProfileByID));","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/project/MyProject.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/store.ts",["477","478"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/header/CreateOptions.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tracks/Tracks.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/like/LikePost.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/options/Options.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/login-register/Login.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/posts/reducers.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/posts/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/mate/Mate.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/notifications/Notifications.tsx",["479"],"import React, {useEffect, useState, Fragment} from 'react'\nimport { useLocation , Link, withRouter} from \"react-router-dom\";\n// GraphQL\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport {GET_NOTIFICATIONS, GET_MY_MATES, MY_ACCOUNT} from \"../../graphql/queries\";\nimport { ADD_MATE , DELETE_NOTIFICATION} from \"../../graphql/mutations\";\n// Redux\nimport {connect, ConnectedProps} from \"react-redux\";\n\n\ninterface ComponentProps {\n  application: {\n    notificationPanel : boolean\n  }\n}\n\nconst mapStateToProps = (state: ComponentProps) => ({\n  notificationPanel: state.application.notificationPanel\n})\n\nconst mapDispatch = {\n  toggleNotifications : (payload: boolean) => ({ type: \"TOGGLE__NOTIFICATIONS\", payload: payload }),\n}\n\nconst connector = connect(mapStateToProps, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux & {\n  history: any\n}\n\nconst Notifications = ({toggleNotifications, notificationPanel, history} : Props) => {\n  const [oldLocation , setLocation] = useState(\"\")\n  const { loading, data } = useQuery(GET_NOTIFICATIONS);\n  const { loading: meLoading, data: meData } = useQuery(MY_ACCOUNT);\n\n  const [addMate] = useMutation(ADD_MATE);\n  const [deleteNotification] = useMutation(DELETE_NOTIFICATION);\n\n  var location = useLocation();\n  var pathName = location.pathname\n\n useEffect(() => {\n    if(oldLocation !== \"\" &&  pathName !== oldLocation) {\n      toggleNotifications(false)\n      setLocation(pathName)\n    } else {\n      setLocation(pathName)\n    }\n  }, [pathName, oldLocation, toggleNotifications])\n\n\n  if(!loading && data){\n    console.log(data);\n  }\n  const acceptMateRequest = async (userId: number , notificationId: number) => {\n    console.log(userId);\n    await addMate({\n      variables: {\n        mateId: userId\n      },\n      update: (cache, { data: { addMate } }) => {\n        cache.writeQuery({\n          query: GET_MY_MATES, \n          variables : {\n          userId: meData.me.id\n          }, \n          data: {\n            getMates: addMate\n          } \n      })\n      }\n    })\n    try{\n        await deleteNotification({\n        variables: {\n          id: notificationId \n        },\n        update: (cache , {data: {deleteNotification} }) => {\n          cache.writeQuery({\n            query: GET_NOTIFICATIONS,\n            data : {\n              notifications: deleteNotification\n            }\n          })\n        }\n      }).then(() => {\n          // Close notifications with redux\n      })\n      .catch(err => console.log(err))\n      \n    }catch(err) {\n      console.log(err);\n    }\n    \n  }\n\n  const declineRequest = async (notificationId: number) => {\n    await deleteNotification({\n      variables: {\n        id: notificationId \n      },\n      update: (cache , {data: {deleteNotification} }) => {\n        cache.writeQuery({\n          query: GET_NOTIFICATIONS,\n          data : {\n            notifications: deleteNotification\n          }\n        })\n      }\n    })\n  }\n  const takeToProject = async (notificationId: number, projectId: string) => {\n      history.push(`/workspace/${projectId}`)\n      await deleteNotification({\n        variables: {\n          id: notificationId \n        },\n        update: (cache , {data: {deleteNotification} }) => {\n          cache.writeQuery({\n            query: GET_NOTIFICATIONS,\n            data : {\n              notifications: deleteNotification\n            }\n          })\n        }\n      })\n  }\n      return (\n          <div className=\"notifications-container\">\n            <h3>Notifications</h3>\n            <ul>\n              {!loading && data && data.notifications && data.notifications.map((notification: any) => \n               <li key={notification.id} > \n                <div className=\"list-top\">\n                <Link to={`/profile/${notification.senderId}`}>\n                  <img src={notification.avatar} alt=\"User Avatar\"/>\n                </Link>\n              \n                  <Fragment>\n                   <p className=\"name\">\n                     <Link to={`/profile/${notification.senderId}`}>{notification.senderName}</Link> {notification.message.split(\"/\")[0]}</p>\n                  </Fragment>\n             \n                </div>\n                { notification.type === \"request\" &&  \n                    <div className=\"li-btns\">\n                      <button className=\"accept-btn\" onClick={() => acceptMateRequest(notification.senderId, notification.id)}>Accept</button>\n                      <button className=\"decline-btn\" onClick={() => declineRequest(notification.id)}>Decline</button>\n                    </div>\n                 }\n                 {\n                   notification.type === \"contributor\" && \n                    <div className=\"li-btns\">\n                      <button onClick={() => takeToProject(notification.id, notification.message.split(\"/\")[1])}>See project</button>\n                      <button className=\"decline-btn\" onClick={() => declineRequest(notification.id)}>Delete</button>\n                    </div>\n                 }\n              </li>)}\n              {!loading && data && data.notifications.length < 1 && <li>You have no notifcations.</li> }\n            </ul>\n          </div>\n      )}\n\nexport default withRouter(connector(Notifications));\n","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/components/ResultComponent.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/graphql/queries.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/notFound/NotFound.tsx",["480"],"import React from 'react'\n\ninterface RouteState {}\n\nconst NotFound = () => {\n    return (\n    \n        <div className=\"notFound\">\n            <p>404 : NotFound</p>\n        </div>);\n}\n\nexport default NotFound;","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/navigation/Navigation.tsx",["481","482"],"import React, { useState } from 'react'\nimport { NavLink } from \"react-router-dom\";\n// GraphQL\nimport { useQuery } from \"@apollo/client\"\nimport { MY_PROJECTS, MY_ACCOUNT } from \"../../graphql/queries\";\n//  Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps  {\n  application : {\n    projectPanel: boolean\n  }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  projectPanel: state.application.projectPanel\n})\n\nconst mapDispatch = {\n  intialiseProject: (bool: boolean ) => ({type: \"INIT_PROJECT\", payload: bool }),\n}\n\nconst connector = connect(mapState, mapDispatch);\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\n const Navigation = ({projectPanel,  intialiseProject} : Props) => {\n   const [activeLink, setActiveLink] = useState(\"\")\n  const { data, loading } = useQuery(MY_PROJECTS);\n  const { data: meData, loading: meLoading } = useQuery(MY_ACCOUNT);\n\n  const createProject = () => {\n    if(projectPanel === false) {\n      intialiseProject(true)\n    } else {\n      intialiseProject(false)\n    }\n  } \n  return (\n    \n    <div className=\"main-menu\">\n      <h4 className=\"menu-title\">Menu</h4>\n      <nav className=\"menu-navigation\">\n      <ul> \n            { !meLoading && meData && meData.me &&    \n              <li>\n                <NavLink exact activeClassName=\"navlink-active\" to=\"/profile/me\">\n                <span className=\"menu-icons\">\n                  <img src={meData.me.avatar} alt=\"Profile Avatar\" className=\"avatar\"/>\n                </span>\n                <p className=\"profile-name\">{meData.me.firstName + \" \" + meData.me.lastName}</p></NavLink></li>\n           } \n            <li>\n              <NavLink exact activeClassName=\"navlink-active\" to=\"/feed\">\n              <span className=\"menu-icons\">\n               <img src=\"/assets/icons/menu/feed-bg.svg\" alt=\"Feed\"/>\n              </span>\n              <p>Feed</p>\n              <div className=\"active-circle\"></div> </NavLink>\n            </li>\n            <li>\n              <NavLink exact activeClassName=\"navlink-active\" to=\"/discover\">\n              <span className=\"menu-icons\">\n               <img src=\"/assets/icons/menu/discover-bg.svg\" alt=\"Discover\"/>\n              </span>\n              <p>Discover</p>\n              <div className=\"active-circle\"></div> </NavLink>\n            </li>\n            <li>\n\n              <NavLink exact activeClassName=\"navlink-active\" to=\"/projects\">\n                <span className=\"menu-icons\">\n                  <img src=\"/assets/icons/menu/projects-bg.svg\" alt=\"Project\"/>\n                </span>\n                <p>Projects</p>\n              <div className=\"active-circle\"></div> </NavLink>\n            </li>\n            <li>\n              <NavLink exact activeClassName=\"navlink-active\" to=\"/mates\">\n              <span className=\"menu-icons\">\n                <img src=\"/assets/icons/menu/mates-bg.svg\" alt=\"Mates\"/>\n              </span>\n              <p>Mates</p>\n              <div className=\"active-circle\"></div> </NavLink>\n              </li>\n          </ul>\n  \n      </nav>\n      <nav className=\"menu-projects\">\n        <ul>\n          <li><p className=\"menu-projects-title\">Projects</p></li>\n          <li>\n            <button \n              className=\"menu-create-project\"\n              onClick={() => createProject()}\n              disabled={projectPanel === true}\n              >\n            <p>Create</p>\n            <img src=\"/assets/icons/plus/plus-white.svg\" alt=\"Create Project\"/></button></li>\n\n            { !loading && data && data.myProjects ? data.myProjects.map((project: any) => \n            <li key={project.id}><NavLink exact activeClassName=\"navlink-active\" to={`/workspace/${project.id}`}>{project.name}</NavLink></li>) : null}\n            \n        </ul>\n      </nav>\n  </div>\n  )\n}\n\nexport default connector(Navigation);\n",{"ruleId":"483","replacedBy":"484"},{"ruleId":"485","replacedBy":"486"},{"ruleId":"487","severity":1,"message":"488","line":1,"column":48,"nodeType":"489","messageId":"490","endLine":1,"endColumn":54},{"ruleId":"483","replacedBy":"491"},{"ruleId":"485","replacedBy":"492"},{"ruleId":"487","severity":1,"message":"493","line":14,"column":26,"nodeType":"489","messageId":"490","endLine":14,"endColumn":31},{"ruleId":"483","replacedBy":"494"},{"ruleId":"485","replacedBy":"495"},{"ruleId":"487","severity":1,"message":"496","line":66,"column":10,"nodeType":"489","messageId":"490","endLine":66,"endColumn":20},{"ruleId":"483","replacedBy":"497"},{"ruleId":"485","replacedBy":"498"},{"ruleId":"483","replacedBy":"499"},{"ruleId":"485","replacedBy":"500"},{"ruleId":"487","severity":1,"message":"501","line":33,"column":22,"nodeType":"489","messageId":"490","endLine":33,"endColumn":35},{"ruleId":"487","severity":1,"message":"502","line":59,"column":9,"nodeType":"489","messageId":"490","endLine":59,"endColumn":26},{"ruleId":"483","replacedBy":"503"},{"ruleId":"485","replacedBy":"504"},{"ruleId":"487","severity":1,"message":"505","line":43,"column":21,"nodeType":"489","messageId":"490","endLine":43,"endColumn":33},{"ruleId":"487","severity":1,"message":"506","line":2,"column":10,"nodeType":"489","messageId":"490","endLine":2,"endColumn":18},{"ruleId":"487","severity":1,"message":"507","line":3,"column":10,"nodeType":"489","messageId":"490","endLine":3,"endColumn":20},{"ruleId":"487","severity":1,"message":"508","line":3,"column":22,"nodeType":"489","messageId":"490","endLine":3,"endColumn":37},{"ruleId":"487","severity":1,"message":"509","line":1,"column":28,"nodeType":"489","messageId":"490","endLine":1,"endColumn":37},{"ruleId":"487","severity":1,"message":"510","line":48,"column":9,"nodeType":"489","messageId":"490","endLine":48,"endColumn":23},{"ruleId":"511","severity":1,"message":"512","line":12,"column":8,"nodeType":"513","endLine":12,"endColumn":10,"suggestions":"514"},{"ruleId":"483","replacedBy":"515"},{"ruleId":"485","replacedBy":"516"},{"ruleId":"487","severity":1,"message":"517","line":36,"column":10,"nodeType":"489","messageId":"490","endLine":36,"endColumn":23},{"ruleId":"487","severity":1,"message":"518","line":38,"column":10,"nodeType":"489","messageId":"490","endLine":38,"endColumn":26},{"ruleId":"487","severity":1,"message":"502","line":70,"column":9,"nodeType":"489","messageId":"490","endLine":70,"endColumn":26},{"ruleId":"487","severity":1,"message":"509","line":1,"column":17,"nodeType":"489","messageId":"490","endLine":1,"endColumn":26},{"ruleId":"487","severity":1,"message":"519","line":1,"column":29,"nodeType":"489","messageId":"490","endLine":1,"endColumn":37},{"ruleId":"487","severity":1,"message":"520","line":2,"column":10,"nodeType":"489","messageId":"490","endLine":2,"endColumn":14},{"ruleId":"487","severity":1,"message":"521","line":2,"column":16,"nodeType":"489","messageId":"490","endLine":2,"endColumn":27},{"ruleId":"487","severity":1,"message":"506","line":3,"column":10,"nodeType":"489","messageId":"490","endLine":3,"endColumn":18},{"ruleId":"487","severity":1,"message":"507","line":4,"column":10,"nodeType":"489","messageId":"490","endLine":4,"endColumn":20},{"ruleId":"487","severity":1,"message":"522","line":3,"column":10,"nodeType":"489","messageId":"490","endLine":3,"endColumn":21},{"ruleId":"487","severity":1,"message":"523","line":8,"column":5,"nodeType":"489","messageId":"490","endLine":8,"endColumn":11},{"ruleId":"487","severity":1,"message":"524","line":9,"column":5,"nodeType":"489","messageId":"490","endLine":9,"endColumn":11},{"ruleId":"487","severity":1,"message":"525","line":11,"column":7,"nodeType":"489","messageId":"490","endLine":11,"endColumn":18},{"ruleId":"487","severity":1,"message":"526","line":32,"column":5,"nodeType":"489","messageId":"490","endLine":32,"endColumn":20},{"ruleId":"487","severity":1,"message":"527","line":35,"column":10,"nodeType":"489","messageId":"490","endLine":35,"endColumn":19},{"ruleId":"487","severity":1,"message":"528","line":35,"column":21,"nodeType":"489","messageId":"490","endLine":35,"endColumn":33},{"ruleId":"487","severity":1,"message":"529","line":38,"column":10,"nodeType":"489","messageId":"490","endLine":38,"endColumn":18},{"ruleId":"487","severity":1,"message":"530","line":38,"column":20,"nodeType":"489","messageId":"490","endLine":38,"endColumn":27},{"ruleId":"487","severity":1,"message":"531","line":39,"column":10,"nodeType":"489","messageId":"490","endLine":39,"endColumn":21},{"ruleId":"487","severity":1,"message":"532","line":39,"column":23,"nodeType":"489","messageId":"490","endLine":39,"endColumn":34},{"ruleId":"487","severity":1,"message":"533","line":40,"column":18,"nodeType":"489","messageId":"490","endLine":40,"endColumn":27},{"ruleId":"487","severity":1,"message":"534","line":46,"column":20,"nodeType":"489","messageId":"490","endLine":46,"endColumn":31},{"ruleId":"487","severity":1,"message":"535","line":47,"column":10,"nodeType":"489","messageId":"490","endLine":47,"endColumn":17},{"ruleId":"487","severity":1,"message":"519","line":1,"column":18,"nodeType":"489","messageId":"490","endLine":1,"endColumn":26},{"ruleId":"487","severity":1,"message":"509","line":1,"column":28,"nodeType":"489","messageId":"490","endLine":1,"endColumn":37},{"ruleId":"487","severity":1,"message":"536","line":1,"column":17,"nodeType":"489","messageId":"490","endLine":1,"endColumn":25},{"ruleId":"487","severity":1,"message":"509","line":1,"column":27,"nodeType":"489","messageId":"490","endLine":1,"endColumn":36},{"ruleId":"487","severity":1,"message":"520","line":2,"column":10,"nodeType":"489","messageId":"490","endLine":2,"endColumn":14},{"ruleId":"487","severity":1,"message":"536","line":1,"column":17,"nodeType":"489","messageId":"490","endLine":1,"endColumn":25},{"ruleId":"487","severity":1,"message":"509","line":1,"column":27,"nodeType":"489","messageId":"490","endLine":1,"endColumn":36},{"ruleId":"487","severity":1,"message":"520","line":2,"column":10,"nodeType":"489","messageId":"490","endLine":2,"endColumn":14},{"ruleId":"483","replacedBy":"537"},{"ruleId":"485","replacedBy":"538"},{"ruleId":"487","severity":1,"message":"519","line":1,"column":17,"nodeType":"489","messageId":"490","endLine":1,"endColumn":25},{"ruleId":"487","severity":1,"message":"539","line":26,"column":21,"nodeType":"489","messageId":"490","endLine":26,"endColumn":33},{"ruleId":"487","severity":1,"message":"540","line":114,"column":8,"nodeType":"489","messageId":"490","endLine":114,"endColumn":25},{"ruleId":"487","severity":1,"message":"521","line":2,"column":61,"nodeType":"489","messageId":"490","endLine":2,"endColumn":72},{"ruleId":"487","severity":1,"message":"541","line":20,"column":8,"nodeType":"489","messageId":"490","endLine":20,"endColumn":17},{"ruleId":"487","severity":1,"message":"542","line":21,"column":8,"nodeType":"489","messageId":"490","endLine":21,"endColumn":22},{"ruleId":"487","severity":1,"message":"543","line":10,"column":8,"nodeType":"489","messageId":"490","endLine":10,"endColumn":15},{"ruleId":"487","severity":1,"message":"544","line":11,"column":8,"nodeType":"489","messageId":"490","endLine":11,"endColumn":18},{"ruleId":"487","severity":1,"message":"545","line":1,"column":10,"nodeType":"489","messageId":"490","endLine":1,"endColumn":23},{"ruleId":"487","severity":1,"message":"546","line":5,"column":24,"nodeType":"489","messageId":"490","endLine":5,"endColumn":33},{"ruleId":"487","severity":1,"message":"547","line":36,"column":20,"nodeType":"489","messageId":"490","endLine":36,"endColumn":29},{"ruleId":"487","severity":1,"message":"548","line":3,"column":11,"nodeType":"489","messageId":"490","endLine":3,"endColumn":21},{"ruleId":"487","severity":1,"message":"549","line":28,"column":11,"nodeType":"489","messageId":"490","endLine":28,"endColumn":21},{"ruleId":"487","severity":1,"message":"550","line":28,"column":23,"nodeType":"489","messageId":"490","endLine":28,"endColumn":36},"no-native-reassign",["551"],"no-negated-in-lhs",["552"],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar",["551"],["552"],"'error' is assigned a value but never used.",["551"],["552"],"'toggleMenu' is assigned a value but never used.",["551"],["552"],["551"],["552"],"'setIndexLimit' is assigned a value but never used.","'toggleOptionsMenu' is assigned a value but never used.",["551"],["552"],"'setRecording' is assigned a value but never used.","'useQuery' is defined but never used.","'MY_ACCOUNT' is defined but never used.","'SEARCH_PROJECTS' is defined but never used.","'useEffect' is defined but never used.","'createTabPanel' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formatTimestamp'. Either include it or remove the dependency array.","ArrayExpression",["553"],["551"],["552"],"'trackDuration' is assigned a value but never used.","'currentProjectId' is assigned a value but never used.","'useState' is defined but never used.","'Link' is defined but never used.","'useLocation' is defined but never used.","'useMutation' is defined but never used.","'ab2str' is assigned a value but never used.","'str2ab' is assigned a value but never used.","'MicRecorder' is assigned a value but never used.","'counter' is defined but never used.","'trackForm' is assigned a value but never used.","'setTrackForm' is assigned a value but never used.","'initForm' is assigned a value but never used.","'setForm' is assigned a value but never used.","'audioBuffer' is assigned a value but never used.","'storeBuffer' is assigned a value but never used.","'setTracks' is assigned a value but never used.","'setIsActive' is assigned a value but never used.","'minutes' is assigned a value but never used.","'Fragment' is defined but never used.",["551"],["552"],"'setDobErrors' is assigned a value but never used.","'deleteCommentById' is assigned a value but never used.","'AuthRoute' is defined but never used.","'UnAuthRedirect' is defined but never used.","'Options' is defined but never used.","'Validation' is defined but never used.","'createElement' is defined but never used.","'RootState' is defined but never used.","'meLoading' is assigned a value but never used.","'RouteState' is defined but never used.","'activeLink' is assigned a value but never used.","'setActiveLink' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"554","fix":"555"},"Update the dependencies array to be: [formatTimestamp]",{"range":"556","text":"557"},[274,276],"[formatTimestamp]"]