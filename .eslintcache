[{"/Users/jay/Desktop/Current Projects/Foliotune/web/src/accessToken.ts":"1","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/login-register/Register.tsx":"2","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/projects/Projects.tsx":"3","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/landing/Landing.tsx":"4","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/discover/Discover.tsx":"5","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/request/RequestResult.tsx":"6","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/header/Header.tsx":"7","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/application/reducers.ts":"8","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/profile/reducers.ts":"9","/Users/jay/Desktop/Current Projects/Foliotune/web/src/graphql/mutations.ts":"10","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/searchResult/lists/Projects.tsx":"11","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/header/Search.tsx":"12","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/posts/Posts.tsx":"13","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/navigation/DropDown.tsx":"14","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/posts/UsersPost.tsx":"15","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/me/Posts.tsx":"16","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/edit/Bio.tsx":"17","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tracks/Recording.tsx":"18","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/components/ProjectsHeader.tsx":"19","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tabs/Tabs.tsx":"20","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/profile/types.ts":"21","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/project/UsersProject.tsx":"22","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/formatTime/FormatTimestamp.tsx":"23","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/components/EmptyState.tsx":"24","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/DeleteWSItem.tsx":"25","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tabs/CreateTabs.tsx":"26","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/contributors/ContributorPanel.tsx":"27","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/functions/Share.tsx":"28","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/contributors/RemoveContributor.tsx":"29","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/Workspace.tsx":"30","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/playbar/Playbar.tsx":"31","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/functions/CreatePost.tsx":"32","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/playbar/reducers.ts":"33","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/header/AccountOptions.tsx":"34","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/sharedProject/UserSharedProject.tsx":"35","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/create/CreateComponent.tsx":"36","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/mates/types.ts":"37","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/application/types.ts":"38","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tracks/TracksViewOnly.tsx":"39","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tabs/TabsViewOnly.tsx":"40","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/lyrics/Lyrics.tsx":"41","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/functions/DeletePost.tsx":"42","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/contributors/ContributorAvatar.tsx":"43","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/lyrics/CreatLyrics.tsx":"44","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/options/Options.tsx":"45","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/functions/DeleteComment.tsx":"46","/Users/jay/Desktop/Current Projects/Foliotune/web/src/App.tsx":"47","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/index.ts":"48","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/searchResult/SearchResult.tsx":"49","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/myMates/MyMates.tsx":"50","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/scrollToTop/ScrollToTop.tsx":"51","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/workspace/reducers.ts":"52","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/project/reducers.ts":"53","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/projects/Projects.tsx":"54","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/lyrics/LyricsViewOnly.tsx":"55","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/lists/Mates.tsx":"56","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/components/Information.tsx":"57","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/searchResult/lists/Users.tsx":"58","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/lists/MyProjects.tsx":"59","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/edit/NameDob.tsx":"60","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/workspace/types.ts":"61","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/comments/Comment.tsx":"62","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/functions/Validation.tsx":"63","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/feed/Feed.tsx":"64","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/Profile.tsx":"65","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/functions/CreateProject.tsx":"66","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/lists/SearchMates.tsx":"67","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/sharedProject/MySharedProject.tsx":"68","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/posts/MyPost.tsx":"69","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/edit/Instruments.tsx":"70","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/playbar/types.ts":"71","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/project/types.ts":"72","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/components/SearchProjects.tsx":"73","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/options/Options.tsx":"74","/Users/jay/Desktop/Current Projects/Foliotune/web/src/index.tsx":"75","/Users/jay/Desktop/Current Projects/Foliotune/web/src/Routes.tsx":"76","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/user/reducers.ts":"77","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/user/types.ts":"78","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/UserProfile.tsx":"79","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/project/MyProject.tsx":"80"},{"size":162,"mtime":1609784778104,"results":"81","hashOfConfig":"82"},{"size":16671,"mtime":1615808888811,"results":"83","hashOfConfig":"82"},{"size":439,"mtime":1615475187120,"results":"84","hashOfConfig":"82"},{"size":4815,"mtime":1613041829919,"results":"85","hashOfConfig":"82"},{"size":2047,"mtime":1615287222472,"results":"86","hashOfConfig":"82"},{"size":920,"mtime":1615496879003,"results":"87","hashOfConfig":"82"},{"size":10586,"mtime":1615809196543,"results":"88","hashOfConfig":"82"},{"size":3407,"mtime":1615550526228,"results":"89","hashOfConfig":"82"},{"size":1157,"mtime":1610971675612,"results":"90","hashOfConfig":"82"},{"size":6293,"mtime":1615380144722,"results":"91","hashOfConfig":"82"},{"size":1835,"mtime":1615474296850,"results":"92","hashOfConfig":"82"},{"size":4395,"mtime":1615488235355,"results":"93","hashOfConfig":"82"},{"size":1358,"mtime":1615391981804,"results":"94","hashOfConfig":"82"},{"size":4481,"mtime":1615560701269,"results":"95","hashOfConfig":"82"},{"size":2744,"mtime":1615372985227,"results":"96","hashOfConfig":"82"},{"size":1385,"mtime":1615294259590,"results":"97","hashOfConfig":"82"},{"size":1999,"mtime":1611419923305,"results":"98","hashOfConfig":"82"},{"size":5475,"mtime":1614711671090,"results":"99","hashOfConfig":"82"},{"size":2641,"mtime":1615466176452,"results":"100","hashOfConfig":"82"},{"size":3409,"mtime":1614711923228,"results":"101","hashOfConfig":"82"},{"size":691,"mtime":1610971652091,"results":"102","hashOfConfig":"82"},{"size":2660,"mtime":1615391350040,"results":"103","hashOfConfig":"82"},{"size":1474,"mtime":1612818521028,"results":"104","hashOfConfig":"82"},{"size":1066,"mtime":1615391954421,"results":"105","hashOfConfig":"82"},{"size":4395,"mtime":1614774164287,"results":"106","hashOfConfig":"82"},{"size":5949,"mtime":1612953201368,"results":"107","hashOfConfig":"82"},{"size":7891,"mtime":1614949882503,"results":"108","hashOfConfig":"82"},{"size":4065,"mtime":1615386695469,"results":"109","hashOfConfig":"82"},{"size":3725,"mtime":1614947806717,"results":"110","hashOfConfig":"82"},{"size":6176,"mtime":1615628740062,"results":"111","hashOfConfig":"82"},{"size":3691,"mtime":1615552693876,"results":"112","hashOfConfig":"82"},{"size":4407,"mtime":1615460055346,"results":"113","hashOfConfig":"82"},{"size":641,"mtime":1614861411752,"results":"114","hashOfConfig":"82"},{"size":2562,"mtime":1614962752046,"results":"115","hashOfConfig":"82"},{"size":3968,"mtime":1615374719538,"results":"116","hashOfConfig":"82"},{"size":1750,"mtime":1614959184140,"results":"117","hashOfConfig":"82"},{"size":687,"mtime":1615802807195,"results":"118","hashOfConfig":"82"},{"size":1930,"mtime":1615550154503,"results":"119","hashOfConfig":"82"},{"size":2786,"mtime":1612954874535,"results":"120","hashOfConfig":"82"},{"size":1948,"mtime":1612954665060,"results":"121","hashOfConfig":"82"},{"size":2946,"mtime":1614711953142,"results":"122","hashOfConfig":"82"},{"size":4324,"mtime":1615373898785,"results":"123","hashOfConfig":"82"},{"size":1009,"mtime":1614937151486,"results":"124","hashOfConfig":"82"},{"size":4709,"mtime":1612455319856,"results":"125","hashOfConfig":"82"},{"size":2819,"mtime":1615803605447,"results":"126","hashOfConfig":"82"},{"size":1970,"mtime":1615378781417,"results":"127","hashOfConfig":"82"},{"size":730,"mtime":1615993645459,"results":"128","hashOfConfig":"82"},{"size":705,"mtime":1615377005046,"results":"129","hashOfConfig":"82"},{"size":2616,"mtime":1615488433914,"results":"130","hashOfConfig":"82"},{"size":698,"mtime":1615458628469,"results":"131","hashOfConfig":"82"},{"size":401,"mtime":1611876826825,"results":"132","hashOfConfig":"82"},{"size":1821,"mtime":1614712184030,"results":"133","hashOfConfig":"82"},{"size":1323,"mtime":1614941187124,"results":"134","hashOfConfig":"82"},{"size":944,"mtime":1615465191846,"results":"135","hashOfConfig":"82"},{"size":1389,"mtime":1612955003163,"results":"136","hashOfConfig":"82"},{"size":845,"mtime":1615458775310,"results":"137","hashOfConfig":"82"},{"size":3613,"mtime":1615548204262,"results":"138","hashOfConfig":"82"},{"size":1709,"mtime":1615474079703,"results":"139","hashOfConfig":"82"},{"size":669,"mtime":1615475253603,"results":"140","hashOfConfig":"82"},{"size":7044,"mtime":1611421775916,"results":"141","hashOfConfig":"82"},{"size":1453,"mtime":1614683035304,"results":"142","hashOfConfig":"82"},{"size":7378,"mtime":1615374534698,"results":"143","hashOfConfig":"82"},{"size":4492,"mtime":1615803575820,"results":"144","hashOfConfig":"82"},{"size":1930,"mtime":1615294367121,"results":"145","hashOfConfig":"82"},{"size":6733,"mtime":1615391386062,"results":"146","hashOfConfig":"82"},{"size":5838,"mtime":1615460088978,"results":"147","hashOfConfig":"82"},{"size":1933,"mtime":1615385374101,"results":"148","hashOfConfig":"82"},{"size":4858,"mtime":1615373798576,"results":"149","hashOfConfig":"82"},{"size":3243,"mtime":1615373801343,"results":"150","hashOfConfig":"82"},{"size":2164,"mtime":1611420561537,"results":"151","hashOfConfig":"82"},{"size":509,"mtime":1614861408135,"results":"152","hashOfConfig":"82"},{"size":1256,"mtime":1614941156632,"results":"153","hashOfConfig":"82"},{"size":6864,"mtime":1614954999458,"results":"154","hashOfConfig":"82"},{"size":1121,"mtime":1615374372803,"results":"155","hashOfConfig":"82"},{"size":2758,"mtime":1615993652969,"results":"156","hashOfConfig":"82"},{"size":5556,"mtime":1615496422290,"results":"157","hashOfConfig":"82"},{"size":562,"mtime":1610020920473,"results":"158","hashOfConfig":"82"},{"size":364,"mtime":1610020809656,"results":"159","hashOfConfig":"82"},{"size":4722,"mtime":1615803404950,"results":"160","hashOfConfig":"82"},{"size":4029,"mtime":1615391363354,"results":"161","hashOfConfig":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},"epx82i",{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"164"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"164"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"164"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"196"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"164"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"164"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"196"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"164"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"196"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"164"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"183"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"183"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"183"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"164"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"164"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"164"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jay/Desktop/Current Projects/Foliotune/web/src/accessToken.ts",[],["342","343"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/login-register/Register.tsx",["344"],"import React, { useEffect, useState, Fragment, useRef } from 'react'\nimport { Link, withRouter} from \"react-router-dom\"\n// GraphQL\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { MY_ACCOUNT } from \"../../graphql/queries\";\nimport { REGISTER_USER , LOGIN_USER } from \"../../graphql/mutations\";\n// Components\nimport { setAccessToken } from '../../accessToken';\n\ninterface ComponentProps {\n    history: any\n}\n\nconst Register = ({history}: ComponentProps) => {\n    const [loggingIn, setLogging] = useState(false);\n    const [formData, setFormData] = useState({\n        email : \"\", \n        password: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        day: \"\",\n        month: \"\",\n        year: \"\" });\n    const [passwordErrors , setPasswordErrors] = useState(\"\");\n    const [emailError, setEmailError] = useState(\"\")\n    const [nameErrors, setNameErrors] = useState(\"\")\n    const [dobErrors, setDobErrors] = useState({\n        day: \"\",\n        month: \"\",\n        year: \"\",\n        all: \"\"\n    })\n    const [passwordType, setPasswordType] = useState(\"password\")\n    const [showOrHide, setShowOrHide] = useState(\"show\")\n    const [passwordFocus, setPasswordFocus] = useState(false)\n    const [register] = useMutation(REGISTER_USER);\n    const [login] = useMutation(LOGIN_USER);\n    const { data, loading } = useQuery(MY_ACCOUNT)\n    \n    \n    useEffect(() => {\n        // Checking if user is authenticated and that theyre not logging in \n        // To see whether to push user off the route\n        if(loggingIn === false && !loading && data && data.me) {\n            history.push(\"/feed\");\n        }\n    }, [loggingIn, loading, data, history])\n\n    const onEmailChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n        setFormData({...formData, [e.target.name] : e.target.value})\n        // Email validation : If email doesn't include a @ then set email errors\n        const emailSign: any = /@/g;\n        if(!e.target.value.match(emailSign)) {\n            setEmailError(\"Email must include @\")\n        } else {\n            setEmailError(\"\")\n        }\n    }\n\n    const onChange = (e:any) => {\n        setFormData({...formData, [e.target.name] : e.target.value});\n        const value = e.target.value;\n        // Password validation \n        if(e.target.name === \"password\") {\n            const lowerCaseLetters: any = /[a-z]/g;\n            const upperCaseLetters: any = /[A-Z]/g;\n            const numbers: any  = /[0-9]/g;\n            // Does password contain a lowercase letter\n            if(!value.match(lowerCaseLetters)) {  \n                setPasswordErrors(\"Password must contain a lower case letter\");\n            }\n            // Does password contain an uppercase letter\n            if(!value.match(upperCaseLetters)) {  \n                setPasswordErrors(\"Password must contain an Upper case letter\");\n            }\n            // Does password contain a number\n            if(!value.match(numbers)) {  \n                setPasswordErrors(\"Password must contain a number\");\n            }\n            // Does password contain 8 or more characters\n            if(value.length < 8) {\n                setPasswordErrors(\"Password must contain 8 or more characters\");\n            }\n            // If passed valdiation set errors to empty\n            if(value.match(lowerCaseLetters) && value.match(upperCaseLetters) && value.match(numbers) && value.length >= 8) {\n                setPasswordErrors(\"\");\n            }\n        }\n        let number;\n        // Validating the day of birth and parsing as integar\n        if(e.target.name === \"day\") {\n            number = parseInt(value);  \n            // Check if number is between 1 and 31\n            if(number < 1 || number > 31 ) {\n                setDobErrors({...dobErrors, day: \"Enter a correct day\"})\n            } else {\n                setDobErrors({...dobErrors, day: \"\"})\n            }\n        }\n        // Validating the year of birth and parsing as integar\n        if(e.target.name === \"year\") {\n            number = parseInt(value);\n            // Getting current year\n            var d = new Date();\n            var year = d.getFullYear();\n            // Check if number entered is above 1900 and under the current year\n            if(number < 1900 || number > year ) {\n                setDobErrors({...dobErrors, year: \"Enter a correct year\"})\n            } else {\n                setDobErrors({...dobErrors, year: \"\"})\n            }\n        }\n    }\n\n    const onSubmit =   (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        // Set logginIn state to true so the useEffect doesn't push us to /feed prematurely \n        setLogging(true);\n        const { email , password, firstName , lastName, day, month , year} = formData;\n        // Formatting the date of birth\n        let dob = \"\";\n        if(day !== \"\" &&  month !== \"\" && year !== \"\" ) {\n            dob = day + \" \" + month + \" \" + year\n        }\n        // If fields aren't empty and their are no errors then register user\n        if(emailError === \"\" && email !== \"\" && password !== \"\" && firstName !== \"\" && lastName !== \"\" && dob !== \"\" ) {\n            register({\n                variables: {\n                    email: email.toLowerCase(),\n                    password,\n                    firstName: firstName.toLowerCase(),\n                    lastName: lastName.toLowerCase(),\n                    dob\n                }\n            })\n            .then(async (res: any) => {\n                // If our response contains any errors then we handle them by setting the correct error state\n                if(res.data.register.email !== \"\" ) {\n                    setEmailError(res.data.register.email);\n                } else {\n                    setEmailError(\"\");\n                }\n                if(res.data.register.password !== \"\" ) {\n                    setPasswordErrors(res.data.register.password);\n                } else {\n                    setPasswordErrors(\"\");\n                }\n                // If repsonse is a success : log in the user and update MY_ACCOUNT cache\n                if(res.data.register.success === true)  {\n                    const response = await login({\n                        variables: {\n                            email: email.toLowerCase(),\n                            password,\n                        },\n                        update: (cache, { data: { login } } )=> {\n                            //Update cache with the login data\n                            cache.writeQuery({ \n                                query: MY_ACCOUNT,\n                                data : {\n                                    me : login.user\n                                } \n                            });          \n                        }\n                    })\n                    try {\n                        // If we have response data \n                        if (response?.data) {\n                        // Set access token to the header\n                        setAccessToken(response.data.login.accessToken)   \n                        // Push to feed \n                        history.push(\"/feed\")\n                        // Set logging back to false\n                        setLogging(false)\n                        }\n                    } catch(err) {\n                        console.log(err.message);\n                    }\n                }\n            })\n            . catch(err => {\n                console.log(err);\n            })\n        } else{\n            // Else if there are empty fields and errors handle correctly by setting the correct state\n            if(email === \"\") {\n                setEmailError(\"You must enter a valid email address.\");\n            } else if(emailError !== \"\")  {\n                setEmailError(\"You must enter a valid email address.\");\n            } else {\n                setEmailError(\"\");\n            }\n            if(password === \"\"){\n                setPasswordErrors(\"You must enter a password.\")\n            } else {\n                setPasswordErrors(\"\")\n            }\n            if(firstName === \"\"){\n                setNameErrors(\"You must enter a name.\")\n            } else {\n                setNameErrors(\"\")\n            }\n            if(day === \"\" || month === \"\" || year === \"\"){\n                setDobErrors({...dobErrors , all : \"You must enter a valid date of birth.\"})\n            }else {\n                setDobErrors({...dobErrors , all : \"\"})\n            }\n        }\n    }\n\n    const showPassword = (e:React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault()\n        if(passwordType === \"password\") {\n            setPasswordType(\"text\")\n            setShowOrHide(\"hide\")\n        } else {\n            setPasswordType(\"password\")\n            setShowOrHide(\"show\")\n        }\n    }\n\n    return (\n        <Fragment>\n            <div className=\"login-container\">\n                <h1>SocialSongs</h1>\n                <h2>Sign up to start creating projects and sharing with your mates</h2>\n                <form onSubmit={(e) => onSubmit(e)}>\n                    <span>\n                        <label htmlFor=\"email\">What's your email address?</label>\n                        <input \n                            type=\"text\" \n                            name=\"email\" \n                            id=\"email\"\n                            value={formData.email} \n                            placeholder=\"Enter Email\"\n                            style={ emailError ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                            onChange={e => onEmailChange(e)}/>\n                             { emailError && <p className=\"input-error\">{emailError}</p>}\n                    </span>\n                    <span>\n                        <label htmlFor=\"password\">Password</label>\n                        <input \n                            type={passwordType} \n                            name=\"password\" \n                            id='password'\n                            value={formData.password} \n                            placeholder=\"Enter Password\"\n                            style={ passwordErrors ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                            onFocus={() => setPasswordFocus(true)}\n                            onBlur={() => setPasswordFocus(true)}\n                            onChange={e => onChange(e)}/>\n                             { passwordErrors && <p className=\"input-error\">{passwordErrors}</p>}\n                             <button id=\"show-password\" onClick={(e) => showPassword(e)}>\n                                <img src={`/assets/icons/validate/${showOrHide}-password.svg`} alt=\"Show/hide password\"/>\n                            </button>\n                            <div className=\"password-warning\" style={passwordFocus === true ?{display: \"block\"} : {display: \"none\"}}>\n                                <p>Be cautious of the password you use, at this moment in time this is only a beta version of the application to demonstrate my development skills.</p>\n                            </div>\n                    </span> \n                    <span>\n                    <p className=\"label-p\">Have you got a name?</p>\n                        <span className=\"name-wrapper\">\n                            <span className=\"name-inputs\">\n                                <label htmlFor=\"firstName\">First Name</label>\n                                <input \n                                    type=\"text\" \n                                    name=\"firstName\" \n                                    id=\"firstName\"\n                                    value={formData.firstName} \n                                    placeholder=\"First name\"\n                                    style={ nameErrors ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)}/>\n                            </span>\n                            <span className=\"name-inputs lastName-wrapper\">\n                                <label htmlFor=\"lastName\">Last Name</label>\n                                <input \n                                    type=\"text\" \n                                    name=\"lastName\" \n                                    id=\"lastName\"\n                                    value={formData.lastName} \n                                    placeholder=\"Last name\"\n                                    style={ nameErrors ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)}/>\n                            </span>\n                        </span>\n                        { nameErrors && <p className=\"input-error\">{nameErrors}</p>}\n                    </span>\n                    <span>\n                        <p className=\"label-p\">What's your date of birth?</p>\n                        <span className=\"dob-wrapper\">\n                            <span className=\"dob-inputs day-wrapper\">\n                                <label htmlFor=\"day\">Day</label>\n                                <input \n                                    type=\"text\"\n                                    name=\"day\" \n                                    value={formData.day} \n                                    className=\"dob-input\"\n                                    id=\"day\"\n                                    placeholder=\"DD\"\n                                    maxLength={2}\n                                    style={  dobErrors.all || dobErrors.day !== \"\" ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)}/>\n                            </span>\n                            <span className=\"dob-inputs month-wrapper\">\n                                <label htmlFor=\"month\">Month</label>\n                                <select \n                                    name=\"month\" \n                                    id=\"month\" \n                                    required\n                                    aria-invalid=\"true\"\n                                    style={  dobErrors.all || dobErrors.month !== \"\" ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)} defaultValue={\"\"}>\n                                    <option disabled value=\"\"> Month</option>\n                                    <option value=\"January\">January</option>\n                                    <option value=\"February\">February</option>\n                                    <option value=\"March\">March</option>\n                                    <option value=\"April\">April</option>\n                                    <option value=\"May\">May</option>\n                                    <option value=\"June\">June</option>\n                                    <option value=\"July\">July</option>\n                                    <option value=\"August\">August</option>\n                                    <option value=\"September\">September</option>\n                                    <option value=\"October\">October</option>\n                                    <option value=\"November\">November</option>\n                                    <option value=\"December\">December</option>\n                                </select>\n                            </span>\n                                <span className=\"dob-inputs year-wrapper\">\n                                <label htmlFor=\"year\">Year</label>\n                                <input \n                                    type=\"text\" \n                                    name=\"year\" \n                                    value={formData.year} \n                                    className=\"dob-input\"\n                                    id=\"year\"\n                                    placeholder=\"YYYY\"\n                                    maxLength={4}\n                                    style={ dobErrors.all || dobErrors.year !== \"\" ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)}/>\n                            </span>\n                        </span>\n                        { dobErrors.day || dobErrors.month || dobErrors.year || dobErrors.all ? <p className=\"input-error\">Enter a valid date of birth</p> : null}\n                    </span>\n                    <input type=\"submit\" value=\"Register\" className=\"submit-btn\" id=\"register-submit\"/>\n                    <p className=\"login-p\">Already have an account? <Link to=\"/login\" className=\"login-link\">Login</Link></p>\n                </form>\n            </div>\n         </Fragment>\n    );\n}\n\nexport default withRouter(Register);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/projects/Projects.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/landing/Landing.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/discover/Discover.tsx",["345"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/request/RequestResult.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/header/Header.tsx",["346"],"import React, {useState, Fragment, useEffect} from 'react'\nimport { useLocation } from \"react-router-dom\";\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport { MY_ACCOUNT, GET_NOTIFICATIONS, USER_BY_ID } from \"../../graphql/queries\";\n// Redux\nimport {connect, ConnectedProps} from \"react-redux\";\n// Components\nimport DropDown from \"../navigation/DropDown\";\nimport AccountOptions from \"./AccountOptions\";\nimport Notifications from \"../notifications/Notifications\";\nimport Search from \"./Search\";\nimport CreateOptions from './CreateOptions';\n\ninterface ComponentProps {\n  application:  {\n    location: string,\n    settingsPanel: boolean,\n    postPanel : boolean,\n    projectPanel: boolean,\n    notificationPanel : boolean,\n    searchPanel: boolean,\n    createPanel: boolean,\n    navbar: boolean,\n  },\n  user : {\n    authenticated: boolean,\n    user : {\n      id: number\n    }\n  }\n  LoggedIn: string,\n  Guest: string\n}\n\nconst mapStateToProps = (state: ComponentProps) => ({\n  location : state.application.location,\n  settingsPanel: state.application.settingsPanel,\n  postPanel : state.application.postPanel,\n  projectPanel: state.application.projectPanel,\n  notificationPanel: state.application.notificationPanel,\n  searchPanel: state.application.searchPanel,\n  createPanel: state.application.createPanel,\n  authenticated: state.user.authenticated,\n  user: state.user.user,\n  navbar: state.application.navbar\n})\n\nconst mapDispatch = {\n  closeSettingsPanel : (payload: boolean) => ({ type: \"CLOSE_SETTINGS_PANEL\", payload }),\n  closePostPanel : (payload: boolean) => ({ type: \"CLOSE_POST_PANEL\", payload }),\n  intialiseProject: (bool: boolean ) => ({type: \"INIT_PROJECT\", payload: bool }),\n  toggleNotifications : (payload: boolean) => ({ type: \"TOGGLE__NOTIFICATIONS\", payload }),\n  toggleSearch : (payload: boolean) => ({ type: \"TOGGLE_SEARCH\", payload }),\n  toggleCreatePanel: (payload: boolean) => ({type: \"TOGGLE_CREATE_PANEL\", payload}),\n  toggleNavbar: (payload: boolean) => ({ type: \"NAVBAR_TOGGLE\", payload })\n}\n\nconst connector = connect(mapStateToProps, mapDispatch);\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\nconst Header = ({navbar, location, createPanel, user, postPanel, projectPanel,settingsPanel, notificationPanel, searchPanel, toggleNotifications, closePostPanel, intialiseProject, closeSettingsPanel, toggleSearch, toggleCreatePanel, toggleNavbar} : Props) => {\n  const [btnDetails, setBtnDetails] = useState(\"\")\n  const [unRead, setUnRead]= useState(0)\n  const [toggleMenu, setToggleMenu] = useState(false);\n  const [componentLocation, setComponentLocation] = useState(\"\");\n  const { loading, data } = useQuery(MY_ACCOUNT);\n  const { loading: userLoading, data: userData } = useQuery(USER_BY_ID, {\n    variables : {\n      userId: user?.id\n    }\n  })\n  const { loading: notifLoading, data: notifData } = useQuery(GET_NOTIFICATIONS);\n  const routeLocation = useLocation();\n  var pathname = routeLocation.pathname;\n\n  useEffect(() => {\n    if(pathname !== componentLocation) {\n      setComponentLocation(pathname);\n      setToggleMenu(false);\n    }\n    if(!notifLoading && notifData && notifData.notifications) {\n      setUnRead(notifData.notifications.length)\n      }       \n\n  }, [user,notifLoading, notifData, loading , data, pathname, componentLocation, toggleNavbar])\n\n\n  if(loading) {\n    return <div>Loading...</div>\n  }\n  \n  const openOptionsMenu = () => {\n    if(settingsPanel === false) {\n      closeSettingsPanel(true);\n    } else if(settingsPanel === true) {\n      closeSettingsPanel(false);\n    }\n  }\n\n  const createPost = () => {\n    if(postPanel === false) {\n      closePostPanel(true)\n    } else {\n      closePostPanel(false)\n    }\n  }\n  const createProject = () => {\n    if(projectPanel === false) {\n      intialiseProject(true)\n    } else {\n      intialiseProject(false)\n    }\n  } \n  const openNotifications = () => {\n    if(notificationPanel === false) {\n      toggleNotifications(true)\n    } else {\n      toggleNotifications(false)\n    }\n  }\n\n  const openSearchContainer = () => {\n    if(searchPanel === false) { \n        toggleSearch(true)   \n    } else {\n      toggleSearch(false)   \n    }\n  }\n\n  const openBurgerMenu = () => {\n    if(navbar === true ) {\n      toggleNavbar(false)\n    } else {\n      toggleNavbar(true)\n    }\n  }\n  const openCreateMenu = () => {\n    if(createPanel) {\n      toggleCreatePanel(false)\n    } else {\n      toggleCreatePanel(true)\n    }\n  }\n      return (\n        <Fragment>\n          <div className=\"app-header\">\n            <div className=\"header-wrapper\">\n              <div className=\"aligned-left\">\n                {/* <h3 className=\"logo\">Space</h3> */}\n                <span id=\"left-btns\" style={location === \"workspace\" ?{display:\"flex\"} : {display:\"\"} }>\n                <span className=\"header-btn-wrapper\">\n                  <button\n                    className=\"header-btns\"\n                    onClick={() => openSearchContainer()}\n                    onMouseOver={() => setBtnDetails(\"Search\")}\n                    onMouseOut={() =>  setBtnDetails(\"\")}>\n                      <img src=\"/assets/icons/menu/search-btn.svg\" alt=\"Search\"/>\n                      { btnDetails === \"Search\" && <div className=\"btn-info\">\n                    <p>{btnDetails}</p></div>}\n                  </button>\n                  </span>\n                  <span className=\"header-btn-wrapper\" >\n                  <button \n                    className=\"header-btns\"\n                    onClick={() => openBurgerMenu()}\n                    onMouseOver={() => setBtnDetails(\"Menu\")}\n                    onMouseOut={() =>  setBtnDetails(\"\")}>\n                      <img src=\"/assets/icons/menu/burger.svg\" alt=\"Open Menu\"/>\n                      { btnDetails === \"Menu\" && <div className=\"btn-info\">\n                      <p>{btnDetails}</p></div>}\n                  </button>\n                </span>\n                </span>\n                <span className=\"header-btn-wrapper\" id=\"search-to-hide\">\n                  <button\n                    className=\"header-btns\"\n                    onClick={() => openSearchContainer()}\n                    onMouseOver={() => setBtnDetails(\"Search\")}\n                    onMouseOut={() =>  setBtnDetails(\"\")}\n                    style={location === \"workspace\" ?{display:\"none\"} : {display:\"block\"}}>\n                      <img src=\"/assets/icons/menu/search-btn.svg\" alt=\"Search\"/>\n                      { btnDetails === \"Search\" && <div className=\"btn-info\">\n                    <p>{btnDetails}</p></div>}\n                  </button>\n                  </span>\n\n              </div>\n              <img src=\"/assets/icons/logo/logo-white.svg\" alt=\"Foliotune Logo\" className=\"header-logo\"/>\n              <div className=\"aligned-right\">\n              <span className=\"header-btn-wrapper\"  id=\"create-project-btn\" >\n                <button \n                  className=\"header-btns\" \n                  onClick={() => createProject()}\n                  onMouseOver={() => setBtnDetails(\"Create Project\")}\n                  onMouseOut={() =>  setBtnDetails(\"\")}>\n                  <img src=\"/assets/icons/menu/create-projects.svg\" alt=\"Create Project\"/>\n                  { btnDetails === \"Create Project\" && \n                  <div className=\"btn-info\">\n                     <p>{btnDetails}</p>\n                  </div>}\n                </button>\n                </span>\n                <span className=\"header-btn-wrapper\"   id=\"create-post-btn\" >\n                <button \n                  className=\"header-btns\" \n                  onClick={() => createPost()}\n                  onMouseOver={() => setBtnDetails(\"Create Post\")}\n                  onMouseOut={() =>  setBtnDetails(\"\")}>\n                  <img src=\"/assets/icons/menu/post.svg\" alt=\"Create Post\"/>\n                  { btnDetails === \"Create Post\" && <div className=\"btn-info\">\n                  <p>{btnDetails}</p></div>}\n                </button>\n                </span> \n                <span className=\"header-btn-wrapper\"    id=\"notifcations-btn\" >\n                <button \n                  className=\"header-btns\"        \n                  onClick={() => openNotifications()}\n                  onMouseOver={() => setBtnDetails(\"Notficiations\")}\n                  onMouseOut={() =>  setBtnDetails(\"\")}>\n                  <img src=\"/assets/icons/menu/notifications.svg\" alt=\"Notifications\"/>\n                  {unRead !== 0 && <div className=\"unread-notifications\">{unRead}</div>} \n                  { btnDetails === \"Notficiations\" && <div className=\"btn-info\">\n                    <p>{btnDetails}</p></div>}\n                </button>  \n                {notificationPanel === true ? <Notifications /> : null}\n                </span>\n                <span className=\"header-btn-wrapper\"    id=\"create-btn\" >\n                <button \n                    className=\"header-btns\" \n                    onClick={() => openCreateMenu()}\n                    onMouseOver={() => setBtnDetails(\"Create\")}\n                    onMouseOut={() =>  setBtnDetails(\"\")}>\n                    <img src=\"/assets/icons/menu/create.svg\" alt=\"Create Project\"/>\n                  { btnDetails === \"Create\" && <div className=\"btn-info\">\n                    <p>{btnDetails}</p></div>}\n                </button>\n                {createPanel && <CreateOptions />}\n                </span>\n                <span className=\"header-btn-wrapper\"   id=\"settings-btn\" >\n                <button \n                    className=\"header-btns\" \n                    onClick={() => openOptionsMenu()} \n                    onMouseOver={() => setBtnDetails(\"Options\")}\n                    onMouseOut={() =>  setBtnDetails(\"\")}>\n                  <img src=\"/assets/icons/menu/settings.svg\" alt=\"settings\"/>\n                  { btnDetails === \"Options\" && <div className=\"btn-info\">\n                    <p>{btnDetails}</p></div>}\n                </button>\n                </span>\n                { !loading && data && data.me && \n                  <img src={data.me.avatar} className=\"profile-avatar\"  id=\"avatar\"  alt=\"Profile Avatar\"/>}\n                {!loading && data && data.me === null && !userLoading && userData && userData.user  && <img src={userData.user.avatar} className=\"profile-avatar\" alt=\"Profile Avatar\"/>}\n              </div>\n              {settingsPanel === true  ? <AccountOptions/> : null}\n              {searchPanel === true && <Search />}\n            </div>\n          </div>\n            { navbar === true && <DropDown></DropDown>}\n       </Fragment>\n      )}\n\nexport default connector(Header);\n","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/application/reducers.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/profile/reducers.ts",[],["347","348"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/graphql/mutations.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/searchResult/lists/Projects.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/header/Search.tsx",["349"],"import React, { useState, useEffect, Fragment, useRef } from 'react'\nimport { Link, useLocation, withRouter } from \"react-router-dom\"\n// GraphQL\nimport { useQuery } from \"@apollo/client\"\nimport { SEARCH_APPLICATION } from \"../../graphql/queries\"\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\"\n\ninterface ComponentProps {\n  application : {\n    searchPanel: boolean\n  }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  searchPanel: state.application.searchPanel\n}) \n\nconst mapDispatch = {\n  toggleSearch : (payload: boolean) => ({ type: \"TOGGLE_SEARCH\", payload: payload })\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {\n  history : any\n}\n\nconst Search = ({toggleSearch, searchPanel, history}: Props) => {\n  const [ searchData, setSearchData ] = useState({ search: \"\" })\n  const [routeLocation, setLocation] = useState(\"\")\n  const [indexLimit, setIndexLimit] = useState(8);\n  const { data, loading } = useQuery(SEARCH_APPLICATION, {\n    variables: {\n      input : searchData.search.toLowerCase()\n    }\n  })\n  const location = useLocation();\n  const searchInput = useRef(null);\n\n  useEffect(() => {\n    let pathname = location.pathname;\n    if(routeLocation !== \"\" && pathname!== routeLocation) {\n      toggleSearch(false)\n      setLocation(pathname)\n    } else {\n      setLocation(pathname)\n    }\n\n  }, [location, routeLocation, toggleSearch])\n\n  const closeContainer = () => {\n    if(searchPanel === true ) {\n      toggleSearch(false);\n    } else {\n      toggleSearch(true);\n    }\n  }\n  const onChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setSearchData({...searchData, search: e.target.value })\n  }\n\n  const onSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    history.push(`/search/${searchData.search.toLowerCase()}`)\n  }\n\n  return (\n    <div className=\"search-container\">\n      <span className=\"flex-wrapper\">\n        <button className=\"header-btns\" onClick={() => closeContainer()}>\n          <img src=\"/assets/icons/menu/back.svg\" alt=\"back\"/>\n        </button>\n        <form id=\"search-form\" onSubmit={(e) => onSubmit(e)}>\n          <input autoFocus ref={searchInput} type=\"text\" id=\"search-bar\" placeholder=\"Search projects, people and bands\" value={searchData.search} onChange={(e) => onChange(e)}/>\n        </form>\n      </span>\n      { searchData.search !== \"\" && \n        <ul className=\"search-list\">\n           { !loading && data && data.searchApplication.users.length !== 0 && \n           <Fragment>\n            <span className=\"list-headings\">\n            <h3>Users</h3>\n            <Link to={`/search/${searchData.search}`} className=\"see-more\">See more</Link>\n            </span>\n              { data.searchApplication.users.map((user: any, index: number) => \n              <Fragment key={user.id}>\n                { index < indexLimit &&\n                    <li key={user.id} >\n                    <Link to={`/profile/${user.id}`}  className=\"search-link\"> </Link>\n                      <span>\n                        <img src={user.avatar} alt=\"Users avatar\"/>\n                      </span>\n                      <p className=\"username\">{user.firstName}</p>\n                  </li>\n                 }\n              </Fragment>\n              )}  \n          </Fragment> }\n          { !loading && data && data.searchApplication.projects.length !== 0 && <Fragment>\n            <span className=\"list-headings\">\n              <h3>Projects</h3>\n              <Link to={`/search/${searchData.search}`} className=\"see-more\">See more</Link>\n            </span>\n            {data.searchApplication.projects.map((project: any, index: number) => \n            <Fragment key={project.id}>\n              { index < indexLimit &&\n             <li key={project.id}>\n              <Link to={`/workspace/${project.id}`} className=\"search-link\"></Link>\n                <span>\n                  <img className=\"project-icon\" src=\"/assets/icons/menu/projects.svg\" alt=\"Project icon\"/>\n                </span>\n                <p>{project.name}</p>\n                <Link to={`/profile/${project.creatorId}`} className=\"creator\">by <em>{project.creatorName}</em></Link>\n              </li>\n            }\n            </Fragment> \n          )}\n          </Fragment> }\n        </ul>\n      }\n    </div>\n  )\n}\n\nexport default withRouter(connector(Search));","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/posts/Posts.tsx",[],["350","351"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/navigation/DropDown.tsx",[],["352","353"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/posts/UsersPost.tsx",["354"],"import React, { useState } from 'react'\nimport { Link } from \"react-router-dom\"\n// Components \nimport Comment from \"../comments/Comment\";\nimport FormatTimestamp from \"../../formatTime/FormatTimestamp\"\nimport LikePost from \"../like/LikePost\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\ninterface ComponentProps  {\n  application : {\n    options: string\n  }\n}\nconst mapState = (state: ComponentProps) => ({\n  options: state.application.options,\n})\n\nconst mapDispatch = {\n  toggleOptions: (postId: string) => ({type: \"PROJECT_OPTIONS\", payload: postId}),\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {\n  post : { \n    post: {\n      id: number\n      creatorId : string\n      avatar: string\n      created: number\n      content: string\n      creatorName: string\n    }\n    project: {\n      id: string\n      mainTrack: string\n    }\n    comments: [{\n      id: number\n      postId:  number\n      userId:  number\n      userName: string\n      comment: string\n      created : number\n      avatar : string\n    }]\n    likes : [{\n      id : number\n      postId: number\n      userId: string\n    }]\n  }\n}\n\n\nconst UsersPost = ({ post, options, toggleOptions }: Props ) => {\n  const [ postIdForComment, setIdForComments ] = useState(0)\n\n  const toggleOptionsMenu = (id: number) => {\n    if(options === \"\") {\n      toggleOptions(\"dssd\")\n    } else {\n      toggleOptions(\"\")\n    }\n  }\n  const openComments = (postId: number) => {\n    if(postIdForComment === postId) {\n     setIdForComments(0)\n    } else {\n     setIdForComments(postId)\n    }\n  }\n\n  return (\n    <div className=\"post\">\n      <div className=\"post-top-wrapper\">\n        <div className=\"avatar\">\n          <img src={post.post.avatar} alt=\"User's Avatar\"/>\n        </div>\n        <span className=\"post-name-wrapper\">\n          <Link to={`/profile/${post.post.creatorId}`} className=\"post-name post-user\">{post.post.creatorName}</Link>\n          <FormatTimestamp timestamp={post.post.created} />\n        </span> \n        <span className=\"post-btn-wrapper\"> \n          <LikePost id={post.post.id} />\n        </span>\n      </div>\n    <div className=\"post-content\"><p>{post.post.content}</p></div>\n    <div className=\"post-bottom-wrapper\">\n      <button onClick={() => openComments(post.post.id)} className=\"comment-button\">Comments</button>\n        <p className=\"comments-length\">{post.comments.length}</p>\n      <div className=\"likes\"> \n        <img src=\"/assets/icons/post/thumb.svg\" alt=\"Likes\"/>\n        <p>{post.likes.length}</p>\n      </div>\n    </div>\n    {postIdForComment === post.post.id ? <Comment postId={post.post.id} /> : null}\n  </div> \n  )\n}\n\nexport default connector(UsersPost);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/me/Posts.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/edit/Bio.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tracks/Recording.tsx",["355"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/components/ProjectsHeader.tsx",["356","357","358"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tabs/Tabs.tsx",["359","360"],"import React,  { useState, useEffect } from 'react'\nimport { v4 as uuid } from \"uuid\";\n\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport { GET_TABS } from \"../../../graphql/queries\";\n// Redux\nimport {connect, ConnectedProps } from \"react-redux\";\n// Components\nimport CreateTabs from \"./CreateTabs\";\nimport DeleteWSItem from \"../DeleteWSItem\";\ninterface ComponentProps {\n  workspace: {\n   tabs: {\n     create: boolean,\n     delete: boolean\n   }\n  }\n  project: {\n    currentProject: string\n  }\n}\n\nconst mapState = (state : ComponentProps) => ({\n  currentProject: state.project.currentProject,\n  tabs: state.workspace.tabs\n})\n\nconst mapDispatch = {\n  initTabCreation : (bool: boolean) => ({type: \"INIT_AND_EXIT_TAB_CREATION\", payload: bool}),\n  initTabDeletion : (bool: boolean) => ({type: \"DELETE_TAB\", payload: bool}),\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\n\nconst Tabs = ({initTabCreation, initTabDeletion, currentProject, tabs}: Props) => {\n  const [currentTab ,setCurrentTab] = useState(-1);\n  const { data, loading } = useQuery(GET_TABS, {\n    variables: {\n      projectId: currentProject\n    }\n  });\n\n  const createTabPanel = () => {\n    initTabCreation(true)\n  }\n  const deleteTabPanel = (id: number) => {\n    setCurrentTab(id);\n    initTabDeletion(true);\n  }\n\n  return (\n    <div className=\"tabs-container\">\n      <div className=\"lyric-tab-header\">\n          <h5>Tabs</h5>\n          {/* <button className=\"add-btn\" onClick={() => createTabPanel()}>\n            <img src=\"/assets/icons/workspace/add.svg\" alt=\"Add Lyric\"/>\n          </button> */}\n        </div>\n      {  tabs.create === true ? <CreateTabs></CreateTabs> : null}\n        <div className=\"lyric-tab-scroll-container\">\n          { !loading && data && data.tabs && data.tabs.length !== 0 ? data.tabs.map((tab :any) => \n             <li key={tab.id} className=\"tab-container\">\n             <div className=\"lyric-tab-top\">\n               <p>{tab.description}</p>\n               <div className=\"button-container\">\n                 <button  onClick={() => deleteTabPanel(tab.id)}>\n                   <img src=\"/assets/icons/workspace/delete.svg\" alt=\"Delete Lyric\"/>\n                 </button>\n                 <button className=\"edit-btn\">\n                   <img src=\"/assets/icons/workspace/edit.svg\" alt=\"Edit Lyric\"/>\n                 </button>\n               </div>\n             </div>\n             <div className=\"tab-grid\">\n               <div className=\"grid-lines\">\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n               </div>\n                {  tab.tab.map((item: any) => \n                 <span key={uuid()}>\n                    <p>{ item === -1 ? \"\" : item}</p>\n                 </span> \n                )}\n             </div>\n             {tabs.delete && currentTab === tab.id && <DeleteWSItem wsType=\"tab\" itemId={tab.id}/>}\n         </li> ) : \n         <li className=\"default-workspace\">\n           <p>Add a tab</p>\n           <button onClick={() => initTabCreation(true)}>Create</button>\n          </li>\n         }\n    </div>\n    </div>\n  )\n}\n\nexport default connector(Tabs);\n","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/profile/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/project/UsersProject.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/formatTime/FormatTimestamp.tsx",["361"],"import React, { useState, useEffect } from 'react'\n\ninterface ComponentProps {\n  timestamp : any\n}\n\nfunction FormatTimestamp({ timestamp }: ComponentProps ) {\n    const [formattedTime , setFormattedTime] = useState(\"\")\n\n    useEffect(() => {\n      formatTimestamp();\n    }, [])\n\n    const formatTimestamp = () => {\n      const splitDateAndTime = timestamp.split(\"T\")\n      const date = splitDateAndTime[0].split(\"-\");\n      const time =  splitDateAndTime[1].split(\":\");\n      const hourAndMin = time[0] + \":\" + time[1];\n      var month;\n      switch(date[1]){\n        case \"01\" : month = \"January\"; break;\n        case \"02\" : month = \"Febraury\"; break;\n        case \"03\" : month = \"March\"; break;\n        case \"04\" : month = \"April\"; break;\n        case \"05\" : month = \"May\"; break;\n        case \"06\" : month = \"June\"; break;\n        case \"07\" : month = \"July\"; break;\n        case \"08\" : month = \"August\"; break;\n        case \"09\" : month = \"September\"; break;\n        case \"10\" : month = \"October\"; break;\n        case \"11\" : month = \"November\"; break;\n        case \"12\" : month = \"December\"; break;  \n      };\n      const year = date[0].split(\"\")\n      const yearAbbr = year[2] + year[3];\n      const fullDate = date[2] +  \" \" + month + \" \" + yearAbbr;\n      const displayTimestamp = fullDate + \" at \" + hourAndMin;\n      setFormattedTime(displayTimestamp);\n    }\n\n     return (\n      <p className=\"post-date\">{formattedTime}</p>\n     )\n}\n\nexport default FormatTimestamp;","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/components/EmptyState.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/DeleteWSItem.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tabs/CreateTabs.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/contributors/ContributorPanel.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/functions/Share.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/contributors/RemoveContributor.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/Workspace.tsx",[],["362","363"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/playbar/Playbar.tsx",["364","365"],"import React, { useState, useEffect, useRef, Fragment } from 'react'\nimport { useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport AudioPlayer from 'react-h5-audio-player';\n// GraphQL \nimport { useQuery } from \"@apollo/client\";\nimport { CURRENT_PROJECT } from \"../../graphql/queries\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentState {\n  playbar: {\n    status: boolean,\n    data :  {\n      id: string,\n      projectId: string,\n      trackName: string\n    }\n  }\n}\n\nconst mapState = (state: ComponentState) => ({\n  status: state.playbar.status,\n  data: state.playbar.data\n})\n\nconst connector = connect(mapState)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = PropsFromRedux\n\n\nconst Playbar = ({status, data} : Props) => {\n  const [buffer, setBuffer] = useState(\"\");\n  const [trackDuration, setTrackDuration] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [currentProjectId, setProjectId] = useState(\"\")\n  const { data: projectData , loading} = useQuery(CURRENT_PROJECT, {\n    variables : {\n      projectId : data.projectId\n    }\n  });\n  const player = useRef(null);\n  const location = useLocation()\n  const path = location.pathname;\n  const params = path.split(\"/\");\n  \n  useEffect(() => {\n    if(params[1] === \"workspace\"){\n      setProjectId(params[2])\n    }\n    if(data.projectId) {\n      setProjectId(data.projectId)\n\n      axios.get(`http://localhost:4000/get/${data.projectId}/${data.id}`)\n      .then((res) => {\n        // Make binary buffer from the response data\n        const file = Buffer.from(res.data.Body, 'binary')\n        // Convert buffer into base64 \n        const base64 = file.toString('base64');\n        // Store base 64 in comonent state\n        setBuffer(base64);\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .then(() => {\n        // always executed\n      });  \n    }\n  },[data, buffer, params])\n\n  const playAudio = () => {\n    const audio = player.current as any;\n    setTrackDuration(audio.audio.current.duration)\n    // If player is paused then button calls play function else pause\n    if(audio.audio.current.paused) {\n      audio.audio.current.play();\n    } else  {\n      audio.audio.current.pause();\n    }\n  }\n  return (\n    <div className=\"playbar-container\" style={status === true ? { height: \"90px\" } : { height: \"0\" } }>  \n      <div className=\"playbar-wrapper\">\n      <div className=\"project-details\">\n          {\n            !loading && projectData && projectData.currentProject && \n            <Fragment>\n              <p className=\"track-name\">{data && data.trackName ? data.trackName : projectData.currentProject.name}</p> \n              <p className=\"project-name\">{projectData.currentProject.name}</p>\n            </Fragment>\n          }\n      </div>\n      <div className=\"controls-wrapper\">\n          <div className=\"playbar-controls\">\n          <button id=\"playbar-play\" onClick={() => playAudio()} disabled={buffer === \"\"}>\n            { isPlaying ?  \n            <img src=\"/assets/icons/playbar/pause.svg\" id=\"pause\" alt=\"Pause\"/> :  \n            <img src=\"/assets/icons/playbar/play.svg\" alt=\"Play\"/>\n            }           \n            </button>\n          </div>\n\n          <div className=\"playbar-scrub\">\n          <AudioPlayer\n            autoPlay\n            autoPlayAfterSrcChange={false}\n            src={`data:audio/wav;base64, ${buffer}`}\n            onPlay={() => setIsPlaying(true)}\n            ref={player}\n            defaultCurrentTime=\"0:00\"\n            defaultDuration=\"0:00\"\n          />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default connector(Playbar);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/functions/CreatePost.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/playbar/reducers.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/header/AccountOptions.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/sharedProject/UserSharedProject.tsx",["366"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/create/CreateComponent.tsx",["367","368","369","370","371","372"],"import React, { useEffect , useState} from 'react'\nimport { Link, useLocation } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\";\nimport { MY_ACCOUNT } from \"../../graphql/queries\";\n// Redux \nimport { connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {\n application : {\n   postPanel : boolean,\n   projectPanel: boolean\n }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  postPanel : state.application.postPanel,\n  projectPanel: state.application.projectPanel\n})\n\nconst mapDispatch = {\n  closePostPanel : (payload: boolean) => ({ type: \"CLOSE_POST_PANEL\", payload: payload }),\n  intialiseProject: (bool: boolean ) => ({type: \"INIT_PROJECT\", payload: bool }),\n}\n\nconst connector = connect(mapState, mapDispatch)\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\ntype Props = PropsFromRedux;\nconst CreateComponent = ({projectPanel, postPanel ,closePostPanel , intialiseProject} : Props) => {\n  \n  const togglePostPanel = () => {\n    if(postPanel === true) {\n      closePostPanel(false)\n    } else {\n      closePostPanel(true)\n    }\n  }\n\n  const toggleProjectPanel = () => {\n    if(projectPanel === true) {\n      intialiseProject(false)\n    } else {\n      intialiseProject(true)\n    }\n  }\n\n\n  return (\n    <div className=\"create-component\">\n      <button onClick={() => toggleProjectPanel()} className=\"create-project\"> \n        <img src=\"/assets/icons/create/project-create.svg\" alt=\"Create Project\" />\n        <p>Create Project</p>\n      </button>\n\n      <button onClick={() => togglePostPanel()}  className=\"create-post\"> \n        <img src=\"/assets/icons/create/post-colour.svg\" alt=\"Create Post\" />\n        <p>Create Post</p>\n      </button>\n    </div>\n  )\n}\nexport default connector(CreateComponent);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/mates/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/application/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tracks/TracksViewOnly.tsx",["373","374","375","376","377","378","379","380","381","382","383","384","385","386"],"import React, {useState, useEffect} from 'react'\n// GraphQL\nimport { useMutation } from \"@apollo/client\";\n// import {  } from \"../../../graphql/mutations\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\nvar ab2str = require('arraybuffer-to-string')\nvar str2ab = require('string-to-arraybuffer')\n\nconst MicRecorder = require('mic-recorder-to-mp3');\n\ninterface ComponentProps {\n  playbar: {\n    data : object\n  }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  data: state.playbar.data\n})\n\nconst mapDispatch = {\n  assignTrack: (data: any) => ({type: \"ASSIGN_TRACK\", payload: data })\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\nvar counter: number;\n// import RecorderComponent from \"../RecorderComponent\";\nconst TracksViewOnly  = ({assignTrack} : Props) => {\n  const [trackForm, setTrackForm] = useState({\n    name: \"\"\n  })\n  const [initForm, setForm] = useState(false);\n  const [audioBuffer, storeBuffer] = useState([]);\n  const [tracks, setTracks] = useState([{\n    name: \"\",\n    url : \"\",\n    created: \"\",\n  }])\n  // const [src, setSrc] = useState(\"\");\n  const [isActive, setIsActive] = useState(false);\n  const [minutes, setMinutes] = useState(0);\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    let interval: any = null;\n    if (isActive) {\n      interval = setInterval(() => {\n        if(seconds === 60) {\n          setMinutes(minutes => minutes + 1);\n          setSeconds(0);\n        }else {\n          setSeconds(seconds => seconds + 1);\n        }\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive,seconds])\n\n\nconst sendAudioData = (data: any) => {\n  console.log(data);\n  assignTrack(data);\n}\n\n  return (\n    <div className=\"track-list-container\">\n    <div className=\"track-list-header\">\n      <p>Track Name</p>\n      <p>Track Length</p>\n      <p>Options</p>\n    </div>\n    <div className=\"track-list-scroll\">\n      <div className=\"track-container\">\n        <div className=\"track-details\">\n          <p className=\"track-name\">Track One</p>\n          <p className=\"track-date\">Feb 1, 2019 at 4:23 PM</p>\n        </div>\n      </div>\n      { tracks && tracks.length > 1 ? tracks.map((track) => \n      { return track.url !== \"\" &&  (\n      <li key={track.url}className=\"track-container\">\n      <button className=\"play-audio\" onClick={() => sendAudioData(track)}>  </button>\n        <div className=\"track-details\">\n          <p className=\"track-name\">{track.name}</p>\n          <p className=\"track-date\">{track.created}</p>\n        </div>\n    </li> )\n    }\n      )  : null }\n    </div> \n  </div>\n  )\n}\n\nexport default connector(TracksViewOnly);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/tabs/TabsViewOnly.tsx",["387","388"],"import React,  { useState, useEffect } from 'react'\nimport { v4 as uuid } from \"uuid\";\n\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport { GET_TABS } from \"../../../graphql/queries\";\n// Redux\nimport {connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {\n  project: {\n    currentProject: string\n  }\n}\n\nconst mapState = (state : ComponentProps) => ({\n  currentProject: state.project.currentProject,\n})\n\nconst connector = connect(mapState);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\n\nconst TabsViewOnly = ({currentProject}: Props) => {\n  const { data, loading } = useQuery(GET_TABS, {\n    variables: {\n      projectId: currentProject\n    }\n  });\n\n  return (\n    <div className=\"tabs-container\">\n      <div className=\"lyric-tab-header\">\n          <h5>Tabs</h5>\n        </div>\n        <div className=\"lyric-tab-scroll-container\">\n          { !loading && data && data.tabs && data.tabs.length !== 0 ? data.tabs.map((tab :any) => \n             <li key={tab.id} className=\"tab-container\">\n             <div className=\"lyric-tab-top\">\n               <p>{tab.description}</p>\n             </div>\n             <div className=\"tab-grid\">\n               <div className=\"grid-lines\">\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n                  <div className=\"line\"></div>\n               </div>\n                {  tab.tab.map((item: any) => \n                 <span key={uuid()}>\n                    <p>{ item === -1 ? \"\" : item}</p>\n                 </span> \n                )}\n             </div>\n         </li> ) : \n         <li className=\"default-workspace\">\n           <p>There are no tabs</p>\n          </li>\n         }\n    </div>\n    </div>\n  )\n}\n\nexport default connector(TabsViewOnly);\n","/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/lyrics/Lyrics.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/functions/DeletePost.tsx",["389","390","391"],"import React, { Fragment, useEffect } from 'react'\nimport { Link } from \"react-router-dom\"\n// GraphQL\nimport { useMutation } from \"@apollo/client\";\nimport { MY_POSTS, FEED_POSTS, ALL_POSTS } from \"../../../graphql/queries\";\nimport { DELETE_POST } from \"../../../graphql/mutations\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {\n\n}\n\nconst mapState = (state: ComponentProps) => ({\n\n})\n\nconst mapDispatch = {\n  setPostId : (id:number) => ({type: \"SELECTED_POST_ID\", payload: id}),\n  validatePostDelete: (payload:boolean) => ({type: \"SET_DELETE_COMPONENT\", payload: payload}),\n  togglePostOptions: (payload: boolean) => ({type: \"TOGGLE_POST_OPTIONS\", payload}),\n}\n\nconst connector = connect(mapState, mapDispatch);\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {\n  postId: number\n};\n\nconst DeletePost = ({postId, validatePostDelete, setPostId, togglePostOptions} : Props) => {\n  const [deletePost] = useMutation(DELETE_POST);\n  const deletPostById = () => {\n    const id = postId; \n    // Remove post and update all caches\n    deletePost({\n        variables: { postId: id }, \n        update: (cache, { data: { deletePost }}) => {\n            // Cache for my posts : Update cache to show on profile in realtime\n          const cacheMyData: any = cache.readQuery({ query: MY_POSTS });\n          // Check to see if there is a cache\n          if(cacheMyData !== null) {\n            let updatedMyCache = [...cacheMyData.myPosts];\n            let index;\n            for(let x = 0; x < updatedMyCache.length; x++ ) {\n              if(updatedMyCache[x].postId === postId ) {\n               index =  updatedMyCache.indexOf(updatedMyCache[x]);\n               updatedMyCache.splice(index, 1);\n              }\n          }\n          cache.writeQuery({ \n            query: MY_POSTS, \n            data: {\n              myPosts: updatedMyCache\n            }\n          });\n        }  \n          // Cache for feed posts : Update cache to show on profile in realtime\n          const cacheFeedPosts: any = cache.readQuery({ query: FEED_POSTS });\n          // Check to see if there is a cache\n          if(cacheFeedPosts !== null) {\n            let updatedFeedCache = [...cacheFeedPosts.myFeed];\n            let index;\n            for(let x = 0; x < updatedFeedCache.length; x++ ) {\n              if(updatedFeedCache[x].postId === postId ) {\n               index =  updatedFeedCache.indexOf(updatedFeedCache[x]);\n               updatedFeedCache.splice(index, 1);\n              }\n          }\n          cache.writeQuery({ \n            query: FEED_POSTS, \n            data: {\n              myFeed: updatedFeedCache\n            }\n          });\n        }  \n          // Cache for all posts : Update cache to show on feed in realtime\n          const cacheAllData: any = cache.readQuery({ query: ALL_POSTS });\n           // Check to see if there is a cache\n           if(cacheAllData !== null) {\n            let updatedAllCache = [...cacheAllData.allPosts];\n            let index\n            // Loop through the cache and find the post we want to delete by matching the postId\n            for(let x = 0; x < updatedAllCache.length; x++ ) {\n                if(updatedAllCache[x].postId === postId ) {\n                 index =  updatedAllCache.indexOf(updatedAllCache[x]);\n                 updatedAllCache.splice(index, 1);\n                }\n            }\n          cache.writeQuery({ \n            query: ALL_POSTS,\n            data : {\n              allPosts : updatedAllCache\n            } \n          });\n          }\n        }\n      }).then(() => {\n        setPostId(0);\n        validatePostDelete(false);\n        togglePostOptions(false)\n      })\n      .catch(err => console.log(err) )\n    }\n  return (\n    <div className=\"result-component\">\n      <div className=\"wrapper\">\n            <p>Are you sure you want to delete this post?</p> \n            <span className=\"btn-wrapper\">\n              <button onClick={() => deletPostById()} className=\"delete-btn\">\n                <span className=\"btn-bg\"></span>\n                <p>Delete</p>\n              </button>\n              <button onClick={() =>    validatePostDelete(false)} >\n                <p>Cancel</p>\n              </button>\n            </span>\n      </div>\n    </div>\n  )\n}\nexport default connector(DeletePost)","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/contributors/ContributorAvatar.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/lyrics/CreatLyrics.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/options/Options.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/functions/DeleteComment.tsx",["392","393","394"],"import React, { Fragment, useEffect } from 'react'\nimport { Link } from \"react-router-dom\"\n// GraphQL\nimport { useMutation } from \"@apollo/client\";\nimport { GET_COMMENTS } from \"../../../graphql/queries\";\nimport { DELETE_COMMENT } from \"../../../graphql/mutations\";\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {\n\n}\n\nconst mapState = (state: ComponentProps) => ({\n\n})\n\nconst mapDispatch = {\n  toggleRemoveComment: (payload: boolean) => ({type: \"TOGGLE_REMOVE_COMMENT\", payload})\n}\n\nconst connector = connect(mapState, mapDispatch);\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & {\n  postId: number\n  commentId: number\n};\n\nconst DeleteComment = ({commentId, postId, toggleRemoveComment} : Props) => {\n  const [deleteComment] = useMutation(DELETE_COMMENT);\n  const deleteCommentById = async () => {\n    // Remove Comment and update cache\n    await deleteComment({\n      variables: {\n        commentId: commentId,\n        postId\n      }, \n      update: (cache, { data : {deleteComment} }) => {\n       cache.writeQuery({ \n         query: GET_COMMENTS, \n         variables : {\n             postId\n           },\n         data : {\n           getComments : deleteComment\n         }\n       });\n      }\n    })\n    try {\n      toggleRemoveComment(false);\n    } catch(err){\n      console.log(err);\n    }\n    }\n  return (\n    <div className=\"result-component\">\n      <div className=\"wrapper\">\n            <p>Are you sure you want to delete this comment?</p> \n            <span className=\"btn-wrapper\">\n              <button onClick={() => deleteCommentById()} className=\"delete-btn\">\n                <span className=\"btn-bg\"></span>\n                <p>Delete</p>\n              </button>\n              <button onClick={() =>    toggleRemoveComment(false)} >\n                <p>Cancel</p>\n              </button>\n            </span>\n      </div>\n    </div>\n  )\n}\nexport default connector(DeleteComment)","/Users/jay/Desktop/Current Projects/Foliotune/web/src/App.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/index.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/searchResult/SearchResult.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/myMates/MyMates.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/scrollToTop/ScrollToTop.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/workspace/reducers.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/project/reducers.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/projects/Projects.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/workspace/lyrics/LyricsViewOnly.tsx",["395"],"import React, { useState } from 'react'\n// GraphQL\nimport { useQuery } from \"@apollo/client\";\nimport { GET_LYRICS } from \"../../../graphql/queries\";\n// Redux\nimport { connect , ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {\n  project: {\n    currentProject: string\n  }\n}\n\nconst mapState = (state : ComponentProps) => ({\n  currentProject: state.project.currentProject\n})\n\nconst connector = connect(mapState);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\nconst LyricsViewOnly = ({ currentProject}: Props)  => {\n  const { data, loading } = useQuery(GET_LYRICS , {\n    variables: {\n      projectId: currentProject\n    }\n  });\n\n  return (\n    <div className=\"lyrics-container\">\n    <div className=\"lyric-tab-header\">\n      <h5>Lyrics</h5>\n    </div>\n    <div className=\"lyric-tab-scroll-container\">\n      { !loading && data && data.lyrics && data.lyrics.length !== 0 ? data.lyrics.map((lyric:any)=> \n        <div className=\"lyric-tab-container\" key={lyric.id}> \n          <div className=\"lyric-tab-top\">\n            <p>{lyric.option}</p>\n          </div>\n          <div className=\"lyric-content\">\n            <p>{lyric.lyric}</p>\n          </div>\n       </div>\n      )\n       : <li className=\"default-workspace\">\n       <p>There are no lyrics.</p>\n      </li>\n    }\n      </div>\n  </div>\n  )\n}\n\nexport default connector(LyricsViewOnly);\n","/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/lists/Mates.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/components/Information.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/searchResult/lists/Users.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/lists/MyProjects.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/edit/NameDob.tsx",["396"],"import React, { useState } from \"react\"\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { MY_ACCOUNT } from \"../../../graphql/queries\";\nimport {UPDATE_NAMES_AND_DOB } from \"../../../graphql/mutations\";\n\n// Redux\nimport { connect, ConnectedProps } from \"react-redux\";\n\ninterface ComponentProps {  \n  }\n  \n  const mapState = (state: ComponentProps) => ({})\n  \n  const mapDispatch = {\n    editNames: (payload: boolean) => ({type: \"EDIT_NAME\", payload: payload}),\n  }\n  \n  const connector = connect(mapState,mapDispatch);\n  \n  type PropsFromRedux = ConnectedProps<typeof connector>;\n  type Props = PropsFromRedux\n\nconst NamesDob = ({editNames}: Props) => {\n  const [formErrors , setErrors] = useState({ firstName: \"\", lastName: \"\", dob:\"\"})\n  const [dobErrors, setDobErrors] = useState({\n    day: \"\",\n    month: \"\",\n    year: \"\",\n    all: \"\"\n})\n  const { data } = useQuery(MY_ACCOUNT);\n  const [UpdateNamesAndDob] = useMutation(UPDATE_NAMES_AND_DOB);    \n\n  \n const dobArray = data.me.dob.split(\" \");\n  var day = dobArray[0];\n  var month = dobArray[1];\n  var year = dobArray[2];\n\n\n  const [formData, setFormData] = useState({\n    firstName: data.me.firstName,\n    lastName :  data.me.lastName,\n    day : day,\n    month: month,\n    year: year\n  });\n\n\n  const onChange = (e:any) => {\n    setFormData({...formData, [e.target.name] : e.target.value})\n  }\n\n  const onSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n\n    var errors = {\n      firstName: \"\",\n      lastName: \"\",\n      dob: \"\"\n    }\n\n    if(formData.firstName === \"\") {\n      errors.firstName = \"First name can't be left empty\"\n    }\n    if(formData.lastName === \"\") {\n      errors.lastName = \"Last name can't be left empty\"\n    }\n    if(formData.day === \"\" || formData.month === \"\" || formData.year === \"\") {\n      errors.dob = \"Date of birth can't be left empty\"\n    }\n\n    if(errors.firstName === \"\" && errors.lastName === \"\" &&  errors.dob === \"\") {\n      const dob = formData.day + \" \" + formData.month + \" \" + formData.year;\n  \n      UpdateNamesAndDob({\n        variables : {\n          id: data.me.id,\n          firstName: formData.firstName,\n          lastName: formData.lastName,\n          dob\n        }\n      })\n      editNames(false);\n    } else { \n      setErrors(errors);\n    }\n  }\n\n  return (\n    <form onSubmit={(e) => onSubmit(e)} className=\"edit-form\">\n    <div className=\"name-email-wrapper\">\n        <span>\n            <label htmlFor=\"firstName\" className=\"label\">First Name</label>\n            <input \n              type=\"text\" \n              name=\"firstName\"\n              value={formData.firstName}\n              onChange={(e) => onChange(e)} />\n              { formErrors.firstName && <p className=\"input-error\">{formErrors.firstName}</p> }\n        </span>\n        <span>\n          <label htmlFor=\"lastName\"className=\"label\">Last Name</label>\n          <input \n              type=\"text\" \n              name=\"lastName\"\n              value={formData.lastName}\n              onChange={(e) => onChange(e)} />\n              { formErrors.lastName && <p className=\"input-error\">{formErrors.lastName}</p> }\n        </span>\n        <span className=\"email-container\">\n            <p className=\"label\">Email</p>\n            <p className=\"profile-info\">{data.me.email}</p> \n        </span>\n    </div>\n    <span>\n                        <span className=\"dob-wrapper\">\n                            <span className=\"dob-inputs day-wrapper\">\n                                <label htmlFor=\"day\">Day</label>\n                                <input \n                                    type=\"text\"\n                                    name=\"day\" \n                                    value={formData.day} \n                                    className=\"dob-input\"\n                                    id=\"day\"\n                                    placeholder=\"DD\"\n                                    maxLength={2}\n                                    style={  formErrors.dob ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)}/>\n                            </span>\n                            <span className=\"dob-inputs month-wrapper\">\n                                <label htmlFor=\"month-edit\">Month</label>\n                                <select \n                                    name=\"month\" \n                                    id=\"month-edit\" \n                                    required\n                                    aria-invalid=\"true\"\n                                    style={  formErrors.dob || dobErrors.month !== \"\" ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)} defaultValue={formData.month}>\n                                    <option selected disabled value=\"month\"> Month</option>\n                                  \n                                    <option value=\"January\">January</option>\n                                    <option value=\"February\">February</option>\n                                    <option value=\"March\">March</option>\n                                    <option value=\"April\">April</option>\n                                    <option value=\"May\">May</option>\n                                    <option value=\"June\">June</option>\n                                    <option value=\"July\">July</option>\n                                    <option value=\"August\">August</option>\n                                    <option value=\"September\">September</option>\n                                    <option value=\"October\">October</option>\n                                    <option value=\"November\">November</option>\n                                    <option value=\"December\">December</option>\n                                </select>\n                            </span>\n                                <span className=\"dob-inputs year-wrapper\">\n                                <label htmlFor=\"year\">Year</label>\n                                <input \n                                    type=\"text\" \n                                    name=\"year\" \n                                    value={formData.year} \n                                    className=\"dob-input\"\n                                    id=\"year\"\n                                    placeholder=\"YYYY\"\n                                    maxLength={4}\n                                    style={formErrors.dob ? {border: \"2px solid #F84061\"} : {border: \"none\"} }\n                                    onChange={e => onChange(e)}/>\n                            </span>\n                        </span>\n                        { formErrors.dob && <p className=\"input-error\">{formErrors.dob}</p> }\n                    </span>\n        <input type=\"submit\" value=\"Submit\"/>\n    <button type=\"button\" className=\"edit-profile\" onClick={() => editNames(false)}>\n            <img src=\"/assets/icons/plus/cross-red.svg\" alt=\"close\"/>\n    </button>\n    </form>   \n  )\n}\n\nexport default connector(NamesDob);","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/workspace/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/comments/Comment.tsx",["397"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/functions/Validation.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/feed/Feed.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/Profile.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/functions/CreateProject.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/mates/lists/SearchMates.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/sharedProject/MySharedProject.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/posts/MyPost.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/routes/profile/edit/Instruments.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/playbar/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/project/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/components/SearchProjects.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/post/options/Options.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/index.tsx",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/Routes.tsx",["398","399","400"],"import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route , Redirect, useLocation} from \"react-router-dom\";\n\n// GraphQL \nimport { useQuery } from \"@apollo/client\";\nimport { MY_ACCOUNT } from \"./graphql/queries\";\n\n// Redux \nimport { connect, ConnectedProps } from \"react-redux\";\n\nimport Login from './routes/login-register/Login';\nimport Register from './routes/login-register/Register';\n\n// Components \nimport Header from \"./components/header/Header\";\nimport Playbar from \"./components/playbar/Playbar\";\nimport Navigation from \"./components/navigation/Navigation\";\nimport CreatePost from './components/post/functions/CreatePost';\nimport CreateProject from './components/project/functions/CreateProject';\nimport AuthRoute from \"./components/authRoute/AuthRoute\";\nimport UnAuthRedirect from \"./components/unAuthRedirect/UnAuthRedirect\"\nimport UserProfile from \"./components/profile/user/UserProfile\"\nimport ScrollToTop from \"./components/scrollToTop/ScrollToTop\"\nimport RequestResult from \"./components/request/RequestResult\";\n// Routes\nimport Feed from './routes/feed/Feed';\nimport Workspace from './routes/workspace/Workspace';\nimport MyMates from './routes/myMates/MyMates';\nimport Profile from './routes/profile/Profile';\nimport Projects from './routes/projects/Projects';\nimport NotFound from './routes/notFound/NotFound';\nimport Landing from \"./routes/landing/Landing\";\nimport Discover from \"./routes/discover/Discover\";\nimport SearchResult from \"./routes/searchResult/SearchResult\";\n\ninterface ComponentProps {\n  application : {\n      location: string\n      postPanel : boolean\n      projectPanel : boolean\n      result: {\n        show: boolean\n        success: boolean\n        type: string\n      }\n  }  \n  user: {\n    authenticated : boolean,\n    user : {}\n  }\n  // project: {\n  //   projectPanel : boolean,\n  //   projectDetails : {}\n  // }\n}\n\nconst mapState = (state : ComponentProps) => ({\n  authenticated : state.user.authenticated,\n  location: state.application.location,\n  projectPanel: state.application.projectPanel,\n  postPanel : state.application.postPanel,\n  result: state.application.result\n})\n\nconst mapDispatch = {\n  activatePlaybar : (val:Boolean) => ({type: \"OPEN_PLAYBAR\", payload: val}),\n  authenticateUser: (user: object) => ({ type: \"USER_AUTHENTICATED\", payload: user}),\n}\n\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\n\n// Component \nconst Routes = ({location, projectPanel, authenticated, result, postPanel, activatePlaybar, authenticateUser} : Props) => {\n  const { data , loading } = useQuery(MY_ACCOUNT);\n\n  useEffect(() => {\n    if(!loading && data && data.me) {\n      const contructedUserData = {\n        id : data.me.id,\n        email: data.me.email,\n    }\n    authenticateUser(contructedUserData);\n    }\n    if(!loading && location !== \"workspace\") {\n      activatePlaybar(false);\n    } else if(!loading && location === \"workspace\") {\n      activatePlaybar(true);\n    }\n  }, [location, data, loading, activatePlaybar, authenticateUser])\n  \n    return (\n      <Router>\n\n         {authenticated === true ? \n         <div className=\"app\">\n         <Header />\n         <div className={location !== \"workspace\" ? \"app-wrapper\" : \"app-workspace-wrapper\"} > \n         {location === \"workspace\" ?  null : <Navigation></Navigation>}\n         {postPanel === true ? <CreatePost/> : null}\n         {projectPanel === true ? <CreateProject/> : null}\n         {result.show === true ? <RequestResult /> : null}\n         <ScrollToTop />\n           <Switch>\n             <Route exact path=\"/\">\n               <Redirect to=\"/feed\"></Redirect> \n            </Route> \n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/register\" component={Register} />\n            <Route exact path=\"/\" /> \n            <Route exact path=\"/feed\" component={Feed} />\n            <Route exact path=\"/discover\" component={Discover} />\n             <Route exact path=\"/workspace/:id\" component={Workspace} />\n             <Route exact path=\"/profile/me\" component={Profile} />\n             <Route exact path=\"/projects\" component={Projects} />\n             <Route exact path=\"/mates\" component={MyMates} />\n             <Route exact path=\"/search/:input\" component={SearchResult} />\n             <Route exact path=\"/profile/:id\" component={UserProfile} />\n             <Route component={NotFound} />\n           </Switch>\n         </div>\n         <Playbar></Playbar>\n       </div> \n       :\n        <div className=\"landing\">\n              <ScrollToTop />\n          <Switch>\n              <Route exact path=\"/\" component={Landing} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/register\" component={Register} />\n              {/* <Route component={NotFound} /> */}\n              {/* <Route exact path=\"/login\" component={UnAuthRedirect} />\n              <Route exact path=\"/register\" component={UnAuthRedirect} />\n              <Route exact path=\"/feed\" component={UnAuthRedirect} />\n              <Route exact path=\"/discover\" component={UnAuthRedirect} />\n              <Route path=\"/workspace/\" component={UnAuthRedirect} />\n              <Route path=\"/profile/\" component={UnAuthRedirect} />\n              <Route exact path=\"/projects\" component={UnAuthRedirect} />\n              <Route exact path=\"/mates\" component={UnAuthRedirect} /> */}\n          </Switch>\n        </div>\n         }\n      </Router>\n    )\n}\n\nexport default connector(Routes);\n","/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/reducers/user/reducers.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/redux/actions/user/types.ts",[],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/profile/user/UserProfile.tsx",["401","402"],"/Users/jay/Desktop/Current Projects/Foliotune/web/src/components/project/project/MyProject.tsx",[],{"ruleId":"403","replacedBy":"404"},{"ruleId":"405","replacedBy":"406"},{"ruleId":"407","severity":1,"message":"408","line":1,"column":48,"nodeType":"409","messageId":"410","endLine":1,"endColumn":54},{"ruleId":"407","severity":1,"message":"411","line":14,"column":26,"nodeType":"409","messageId":"410","endLine":14,"endColumn":31},{"ruleId":"407","severity":1,"message":"412","line":66,"column":10,"nodeType":"409","messageId":"410","endLine":66,"endColumn":20},{"ruleId":"403","replacedBy":"413"},{"ruleId":"405","replacedBy":"414"},{"ruleId":"407","severity":1,"message":"415","line":33,"column":22,"nodeType":"409","messageId":"410","endLine":33,"endColumn":35},{"ruleId":"403","replacedBy":"416"},{"ruleId":"405","replacedBy":"417"},{"ruleId":"403","replacedBy":"418"},{"ruleId":"405","replacedBy":"419"},{"ruleId":"407","severity":1,"message":"420","line":59,"column":9,"nodeType":"409","messageId":"410","endLine":59,"endColumn":26},{"ruleId":"407","severity":1,"message":"421","line":43,"column":21,"nodeType":"409","messageId":"410","endLine":43,"endColumn":33},{"ruleId":"407","severity":1,"message":"422","line":2,"column":10,"nodeType":"409","messageId":"410","endLine":2,"endColumn":18},{"ruleId":"407","severity":1,"message":"423","line":3,"column":10,"nodeType":"409","messageId":"410","endLine":3,"endColumn":20},{"ruleId":"407","severity":1,"message":"424","line":3,"column":22,"nodeType":"409","messageId":"410","endLine":3,"endColumn":37},{"ruleId":"407","severity":1,"message":"425","line":1,"column":28,"nodeType":"409","messageId":"410","endLine":1,"endColumn":37},{"ruleId":"407","severity":1,"message":"426","line":48,"column":9,"nodeType":"409","messageId":"410","endLine":48,"endColumn":23},{"ruleId":"427","severity":1,"message":"428","line":12,"column":8,"nodeType":"429","endLine":12,"endColumn":10,"suggestions":"430"},{"ruleId":"403","replacedBy":"431"},{"ruleId":"405","replacedBy":"432"},{"ruleId":"407","severity":1,"message":"433","line":36,"column":10,"nodeType":"409","messageId":"410","endLine":36,"endColumn":23},{"ruleId":"407","severity":1,"message":"434","line":38,"column":10,"nodeType":"409","messageId":"410","endLine":38,"endColumn":26},{"ruleId":"407","severity":1,"message":"420","line":70,"column":9,"nodeType":"409","messageId":"410","endLine":70,"endColumn":26},{"ruleId":"407","severity":1,"message":"425","line":1,"column":17,"nodeType":"409","messageId":"410","endLine":1,"endColumn":26},{"ruleId":"407","severity":1,"message":"435","line":1,"column":29,"nodeType":"409","messageId":"410","endLine":1,"endColumn":37},{"ruleId":"407","severity":1,"message":"436","line":2,"column":10,"nodeType":"409","messageId":"410","endLine":2,"endColumn":14},{"ruleId":"407","severity":1,"message":"437","line":2,"column":16,"nodeType":"409","messageId":"410","endLine":2,"endColumn":27},{"ruleId":"407","severity":1,"message":"422","line":3,"column":10,"nodeType":"409","messageId":"410","endLine":3,"endColumn":18},{"ruleId":"407","severity":1,"message":"423","line":4,"column":10,"nodeType":"409","messageId":"410","endLine":4,"endColumn":20},{"ruleId":"407","severity":1,"message":"438","line":3,"column":10,"nodeType":"409","messageId":"410","endLine":3,"endColumn":21},{"ruleId":"407","severity":1,"message":"439","line":8,"column":5,"nodeType":"409","messageId":"410","endLine":8,"endColumn":11},{"ruleId":"407","severity":1,"message":"440","line":9,"column":5,"nodeType":"409","messageId":"410","endLine":9,"endColumn":11},{"ruleId":"407","severity":1,"message":"441","line":11,"column":7,"nodeType":"409","messageId":"410","endLine":11,"endColumn":18},{"ruleId":"407","severity":1,"message":"442","line":32,"column":5,"nodeType":"409","messageId":"410","endLine":32,"endColumn":20},{"ruleId":"407","severity":1,"message":"443","line":35,"column":10,"nodeType":"409","messageId":"410","endLine":35,"endColumn":19},{"ruleId":"407","severity":1,"message":"444","line":35,"column":21,"nodeType":"409","messageId":"410","endLine":35,"endColumn":33},{"ruleId":"407","severity":1,"message":"445","line":38,"column":10,"nodeType":"409","messageId":"410","endLine":38,"endColumn":18},{"ruleId":"407","severity":1,"message":"446","line":38,"column":20,"nodeType":"409","messageId":"410","endLine":38,"endColumn":27},{"ruleId":"407","severity":1,"message":"447","line":39,"column":10,"nodeType":"409","messageId":"410","endLine":39,"endColumn":21},{"ruleId":"407","severity":1,"message":"448","line":39,"column":23,"nodeType":"409","messageId":"410","endLine":39,"endColumn":34},{"ruleId":"407","severity":1,"message":"449","line":40,"column":18,"nodeType":"409","messageId":"410","endLine":40,"endColumn":27},{"ruleId":"407","severity":1,"message":"450","line":46,"column":20,"nodeType":"409","messageId":"410","endLine":46,"endColumn":31},{"ruleId":"407","severity":1,"message":"451","line":47,"column":10,"nodeType":"409","messageId":"410","endLine":47,"endColumn":17},{"ruleId":"407","severity":1,"message":"435","line":1,"column":18,"nodeType":"409","messageId":"410","endLine":1,"endColumn":26},{"ruleId":"407","severity":1,"message":"425","line":1,"column":28,"nodeType":"409","messageId":"410","endLine":1,"endColumn":37},{"ruleId":"407","severity":1,"message":"452","line":1,"column":17,"nodeType":"409","messageId":"410","endLine":1,"endColumn":25},{"ruleId":"407","severity":1,"message":"425","line":1,"column":27,"nodeType":"409","messageId":"410","endLine":1,"endColumn":36},{"ruleId":"407","severity":1,"message":"436","line":2,"column":10,"nodeType":"409","messageId":"410","endLine":2,"endColumn":14},{"ruleId":"407","severity":1,"message":"452","line":1,"column":17,"nodeType":"409","messageId":"410","endLine":1,"endColumn":25},{"ruleId":"407","severity":1,"message":"425","line":1,"column":27,"nodeType":"409","messageId":"410","endLine":1,"endColumn":36},{"ruleId":"407","severity":1,"message":"436","line":2,"column":10,"nodeType":"409","messageId":"410","endLine":2,"endColumn":14},{"ruleId":"407","severity":1,"message":"435","line":1,"column":17,"nodeType":"409","messageId":"410","endLine":1,"endColumn":25},{"ruleId":"407","severity":1,"message":"453","line":26,"column":21,"nodeType":"409","messageId":"410","endLine":26,"endColumn":33},{"ruleId":"407","severity":1,"message":"454","line":114,"column":8,"nodeType":"409","messageId":"410","endLine":114,"endColumn":25},{"ruleId":"407","severity":1,"message":"437","line":2,"column":61,"nodeType":"409","messageId":"410","endLine":2,"endColumn":72},{"ruleId":"407","severity":1,"message":"455","line":20,"column":8,"nodeType":"409","messageId":"410","endLine":20,"endColumn":17},{"ruleId":"407","severity":1,"message":"456","line":21,"column":8,"nodeType":"409","messageId":"410","endLine":21,"endColumn":22},{"ruleId":"407","severity":1,"message":"457","line":10,"column":8,"nodeType":"409","messageId":"410","endLine":10,"endColumn":15},{"ruleId":"407","severity":1,"message":"458","line":11,"column":8,"nodeType":"409","messageId":"410","endLine":11,"endColumn":18},"no-native-reassign",["459"],"no-negated-in-lhs",["460"],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'error' is assigned a value but never used.","'toggleMenu' is assigned a value but never used.",["459"],["460"],"'setIndexLimit' is assigned a value but never used.",["459"],["460"],["459"],["460"],"'toggleOptionsMenu' is assigned a value but never used.","'setRecording' is assigned a value but never used.","'useQuery' is defined but never used.","'MY_ACCOUNT' is defined but never used.","'SEARCH_PROJECTS' is defined but never used.","'useEffect' is defined but never used.","'createTabPanel' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'formatTimestamp'. Either include it or remove the dependency array.","ArrayExpression",["461"],["459"],["460"],"'trackDuration' is assigned a value but never used.","'currentProjectId' is assigned a value but never used.","'useState' is defined but never used.","'Link' is defined but never used.","'useLocation' is defined but never used.","'useMutation' is defined but never used.","'ab2str' is assigned a value but never used.","'str2ab' is assigned a value but never used.","'MicRecorder' is assigned a value but never used.","'counter' is defined but never used.","'trackForm' is assigned a value but never used.","'setTrackForm' is assigned a value but never used.","'initForm' is assigned a value but never used.","'setForm' is assigned a value but never used.","'audioBuffer' is assigned a value but never used.","'storeBuffer' is assigned a value but never used.","'setTracks' is assigned a value but never used.","'setIsActive' is assigned a value but never used.","'minutes' is assigned a value but never used.","'Fragment' is defined but never used.","'setDobErrors' is assigned a value but never used.","'deleteCommentById' is assigned a value but never used.","'AuthRoute' is defined but never used.","'UnAuthRedirect' is defined but never used.","'Options' is defined but never used.","'Validation' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"462","fix":"463"},"Update the dependencies array to be: [formatTimestamp]",{"range":"464","text":"465"},[274,276],"[formatTimestamp]"]